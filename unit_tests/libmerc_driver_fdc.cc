#include "libmerc_driver_helper.hpp"
#include "fdc.hpp"

unsigned char http_tcp_payload[] = {
    0x47, 0x45, 0x54, 0x20, 0x2f, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31,
    0x2e, 0x31, 0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65,
    0x6e, 0x74, 0x3a, 0x20, 0x57, 0x67, 0x65, 0x74, 0x2f, 0x31, 0x2e, 0x31,
    0x35, 0x20, 0x28, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2d, 0x67, 0x6e, 0x75,
    0x29, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x20, 0x2a,
    0x2f, 0x2a, 0x0d, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x79, 0x61,
    0x68, 0x6f, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x43, 0x6f, 0x6e,
    0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x4b, 0x65, 0x65,
    0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x0d, 0x0a, 0x0d, 0x0a};

unsigned char tls_client_hello_tcp_payload[] = {
    0x16, 0x03, 0x03, 0x00, 0xa7, 0x01, 0x00, 0x00, 0xa3, 0x03, 0x03, 0x64,
    0xbb, 0x66, 0x6d, 0x44, 0x19, 0xe6, 0x62, 0x35, 0x57, 0x9b, 0xed, 0x0b,
    0xfc, 0xc5, 0x19, 0xba, 0xd9, 0xd3, 0xe4, 0x5b, 0x46, 0xed, 0x89, 0x86,
    0x90, 0x60, 0xb6, 0x36, 0x2f, 0xc1, 0xc5, 0x00, 0x00, 0x34, 0xc0, 0x28,
    0xc0, 0x27, 0xc0, 0x14, 0xc0, 0x13, 0x00, 0x9f, 0x00, 0x9e, 0x00, 0x9d,
    0x00, 0x9c, 0xc0, 0x2c, 0xc0, 0x2b, 0xc0, 0x24, 0xc0, 0x23, 0xc0, 0x0a,
    0xc0, 0x09, 0x00, 0x3d, 0x00, 0x3c, 0x00, 0x35, 0x00, 0x2f, 0x00, 0x6a,
    0x00, 0x40, 0x00, 0x38, 0x00, 0x32, 0x00, 0x0a, 0x00, 0x13, 0x00, 0x05,
    0x00, 0x04, 0x01, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x13, 0x00, 0x11,
    0x00, 0x00, 0x0e, 0x63, 0x69, 0x69, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65,
    0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x06, 0x00,
    0x17, 0x00, 0x18, 0x00, 0x19, 0x00, 0x0b, 0x00, 0x02, 0x01, 0x00, 0x00,
    0x0d, 0x00, 0x14, 0x00, 0x12, 0x06, 0x01, 0x06, 0x03, 0x04, 0x01, 0x05,
    0x01, 0x02, 0x01, 0x04, 0x03, 0x05, 0x03, 0x02, 0x03, 0x02, 0x02, 0xff,
    0x01, 0x00, 0x01, 0x00};

unsigned char quic_init_payload[] = {
    0xcb, 0x00, 0x00, 0x00, 0x01, 0x10, 0x51, 0xc1, 0x52, 0xe0, 0xc3, 0xa9,
    0x4c, 0xc9, 0xc9, 0x15, 0x33, 0x7e, 0xfa, 0xca, 0x39, 0xb2, 0x14, 0xfe,
    0xd3, 0x47, 0x3b, 0x23, 0x9c, 0x52, 0x65, 0x1c, 0xc3, 0x15, 0x06, 0xaf,
    0x71, 0x2e, 0x41, 0xa3, 0x89, 0x35, 0x1f, 0x00, 0x41, 0x21, 0x9e, 0x17,
    0xc7, 0x0e, 0xac, 0x1a, 0x2a, 0xcf, 0x52, 0x5f, 0x13, 0x11, 0xa9, 0x3c,
    0xb2, 0xd7, 0xf5, 0xa8, 0x03, 0x0e, 0x38, 0xa1, 0x0a, 0x38, 0xfe, 0x26,
    0xfd, 0xb5, 0x01, 0x93, 0x0f, 0xd3, 0x27, 0xa0, 0xf3, 0x2f, 0xc5, 0x35,
    0xe9, 0x1a, 0x3b, 0xf6, 0x71, 0x56, 0x86, 0x17, 0xb5, 0xbf, 0x94, 0xdb,
    0x9d, 0xb3, 0x84, 0x5a, 0x65, 0xba, 0x0c, 0xda, 0x85, 0x02, 0x78, 0x3f,
    0x08, 0x4c, 0xdb, 0x72, 0x0b, 0x41, 0x24, 0xb9, 0xe6, 0xc6, 0x4e, 0xa6,
    0x98, 0xd2, 0x6c, 0xb5, 0x64, 0x72, 0x7d, 0x30, 0xcf, 0xf6, 0x4f, 0x3a,
    0x63, 0xa0, 0x8a, 0x67, 0x31, 0x52, 0x4d, 0xfe, 0x74, 0x19, 0xff, 0x76,
    0x49, 0xe3, 0x71, 0x09, 0x07, 0x96, 0x03, 0x29, 0xda, 0x51, 0xd7, 0x9d,
    0x9a, 0xf2, 0x3a, 0x30, 0x99, 0xd4, 0x66, 0x14, 0xef, 0x03, 0x6e, 0x74,
    0xa8, 0x71, 0x45, 0xb1, 0x4c, 0x61, 0x5f, 0x46, 0x8f, 0x90, 0x76, 0x50,
    0x0a, 0xd9, 0x38, 0xb7, 0x27, 0xaa, 0xc9, 0xd6, 0x74, 0xc3, 0xbc, 0x09,
    0xa4, 0x18, 0x40, 0x5d, 0x36, 0x44, 0xc6, 0xb0, 0xf6, 0xc6, 0xb5, 0x7d,
    0x09, 0x53, 0x58, 0xd3, 0x72, 0xe2, 0x91, 0x76, 0x71, 0x5f, 0x4f, 0x36,
    0x87, 0xac, 0x9b, 0x84, 0xd3, 0xb3, 0x63, 0x0a, 0x04, 0x40, 0x4d, 0x64,
    0x55, 0xee, 0xc2, 0x01, 0x2d, 0x37, 0x7d, 0x5c, 0xcc, 0x2c, 0x8a, 0x1c,
    0x51, 0x56, 0xf7, 0x1b, 0xd6, 0x55, 0xee, 0xba, 0x48, 0xb4, 0x9f, 0xb4,
    0x81, 0x14, 0xd2, 0xe9, 0x0a, 0x55, 0xbc, 0x24, 0xf0, 0xab, 0xf8, 0x10,
    0x2e, 0x5e, 0x05, 0xf7, 0xd1, 0x91, 0x1f, 0xc8, 0xbc, 0x00, 0x63, 0xba,
    0xfe, 0x6f, 0xf2, 0x8d, 0x69, 0x2b, 0x51, 0x25, 0xb7, 0x84, 0x03, 0xd3,
    0xbd, 0x89, 0xdb, 0x6f, 0xa8, 0xc6, 0xf9, 0xd9, 0x99, 0xa3, 0x44, 0x66,
    0x06, 0xba, 0x8e, 0xb6, 0x1d, 0x94, 0xc9, 0x52, 0x40, 0x11, 0x54, 0x2e,
    0x48, 0x35, 0x6d, 0xde, 0xc6, 0x04, 0xaf, 0x4b, 0x0d, 0x94, 0xdb, 0x11,
    0xee, 0xa8, 0x00, 0x16, 0x5f, 0x54, 0x1a, 0x75, 0xbb, 0xdc, 0x8d, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

unsigned char tls_fragment_1[] = {0x16, 0x3, 0x1, 0x6, 0xb4, 0x1, 0x0, 0x6,
    0xb0, 0x3, 0x3, 0xb4, 0x77, 0x49, 0xa5, 0x58, 0x4e, 0x7d, 0xcd, 0xa8, 0x99,
    0xdf, 0x3, 0xb3, 0xf0, 0x4a, 0xaf, 0x50, 0xf4, 0x26, 0x83, 0x7d, 0xd0, 0xad,
    0x1, 0xc9, 0x45, 0xf5, 0x43, 0x5f, 0x55, 0x2, 0xc8, 0x20, 0x7a, 0xb2, 0x84,
    0xb9, 0xfb, 0x3, 0xb0, 0x47, 0x97, 0xbe, 0x83, 0x13, 0x2d, 0xcd, 0x11, 0x32,
    0x2a, 0x39, 0xf8, 0xa7, 0x3e, 0xfa, 0x6e, 0xc0, 0x8f, 0xa9, 0x1e, 0x30, 0x5,
    0xd2, 0x1d, 0x74, 0x0, 0x20, 0xea, 0xea, 0x13, 0x1, 0x13, 0x2, 0x13, 0x3, 0xc0,
    0x2b, 0xc0, 0x2f, 0xc0, 0x2c, 0xc0, 0x30, 0xcc, 0xa9, 0xcc, 0xa8, 0xc0, 0x13,
    0xc0, 0x14, 0x0, 0x9c, 0x0, 0x9d, 0x0, 0x2f, 0x0, 0x35, 0x1, 0x0, 0x6, 0x47,
    0x5a, 0x5a, 0x0, 0x0, 0x0, 0xa, 0x0, 0xc, 0x0, 0xa, 0x8a, 0x8a, 0x63, 0x99, 0x0,
    0x1d, 0x0, 0x17, 0x0, 0x18, 0x0, 0x0, 0x0, 0x10, 0x0, 0xe, 0x0, 0x0, 0xb, 0x77,
    0x77, 0x77, 0x2e, 0x63, 0x6e, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x0, 0x2b, 0x0, 0x7,
    0x6, 0x6a, 0x6a, 0x3, 0x4, 0x3, 0x3, 0xfe, 0xd, 0x0, 0xba, 0x0, 0x0, 0x1, 0x0,
    0x1, 0x2c, 0x0, 0x20, 0x86, 0x9a, 0x25, 0x15, 0xfd, 0xaf, 0x10, 0xf, 0x2b, 0x14,
    0xe, 0x74, 0xde, 0x86, 0x5, 0x42, 0x66, 0x7, 0x85, 0x4a, 0x59, 0xc0, 0x43, 0x66,
    0x9a, 0x28, 0x76, 0x62, 0x52, 0x26, 0x20, 0x4d, 0x0, 0x90, 0x3a, 0x8f, 0xff,
    0xf5, 0xf6, 0x11, 0x7d, 0xa5, 0x11, 0x64, 0x15, 0x8c, 0xe0, 0x96, 0x50, 0x60,
    0x5f, 0xcb, 0x3a, 0x19, 0xc, 0x10, 0x70, 0x8e, 0x26, 0x32, 0x35, 0x44, 0x1c,
    0xbb, 0x93, 0xdd, 0xd2, 0x36, 0xd, 0x10, 0xc8, 0x42, 0xa, 0xb4, 0x4c, 0x34, 0x6,
    0xee, 0xe1, 0x7e, 0xc6, 0xee, 0xdc, 0x8e, 0xbc, 0x74, 0xd6, 0x78, 0x7b, 0xb3,
    0x1d, 0x23, 0xbc, 0x99, 0xed, 0xda, 0x77, 0xf1, 0x8, 0x82, 0x92, 0x26, 0x2,
    0xf7, 0x86, 0x74, 0x32, 0x28, 0xc7, 0xa0, 0xb5, 0x57, 0xa0, 0xb1, 0x9f, 0x15,
    0x4a, 0xb5, 0x86, 0xa0, 0x44, 0x7d, 0x90, 0xe5, 0x3d, 0x8a, 0x52, 0x5a, 0xf9,
    0x13, 0x1e, 0x8e, 0x86, 0xa6, 0x44, 0x21, 0xe4, 0x62, 0x83, 0xfa, 0x98, 0xc4,
    0x85, 0x4b, 0x18, 0xde, 0xb9, 0x26, 0xec, 0x91, 0xd2, 0xea, 0x58, 0xa5, 0x5c,
    0x80, 0xbd, 0x6, 0xa, 0x45, 0x93, 0xd, 0x49, 0xa, 0xae, 0xcd, 0x59, 0xa, 0xf3,
    0xe9, 0x45, 0x53, 0x79, 0x81, 0x73, 0xe, 0xcb, 0x39, 0x0, 0xd, 0x0, 0x12, 0x0,
    0x10, 0x4, 0x3, 0x8, 0x4, 0x4, 0x1, 0x5, 0x3, 0x8, 0x5, 0x5, 0x1, 0x8, 0x6, 0x6,
    0x1, 0x0, 0xb, 0x0, 0x2, 0x1, 0x0, 0x0, 0x1b, 0x0, 0x3, 0x2, 0x0, 0x2, 0x0, 0x5,
    0x0, 0x5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0xe, 0x0, 0xc, 0x2, 0x68,
    0x32, 0x8, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31, 0x0, 0x17, 0x0, 0x0,
    0xff, 0x1, 0x0, 0x1, 0x0, 0x0, 0x2d, 0x0, 0x2, 0x1, 0x1, 0x44, 0x69, 0x0, 0x5,
    0x0, 0x3, 0x2, 0x68, 0x32, 0x0, 0x33, 0x4, 0xef, 0x4, 0xed, 0x8a, 0x8a, 0x0,
    0x1, 0x0, 0x63, 0x99, 0x4, 0xc0, 0x5f, 0x72, 0xd0, 0x5f, 0x6a, 0x45, 0x10, 0x81,
    0xf9, 0x1a, 0x1f, 0xb4, 0x38, 0x75, 0xb8, 0xd9, 0x4f, 0xf0, 0x15, 0x60, 0x93,
    0x8d, 0x5e, 0x4e, 0x17, 0x30, 0x90, 0x13, 0xb6, 0xa2, 0x63, 0x47, 0x61, 0x15,
    0x1b, 0x44, 0x59, 0x88, 0xfb, 0x2c, 0x0, 0xfb, 0xca, 0x46, 0xb5, 0x44, 0x7a,
    0x1a, 0x15, 0x8a, 0x20, 0x7c, 0x94, 0xbd, 0xc5, 0x3d, 0xdc, 0x1, 0x71, 0xca,
    0x40, 0x3d, 0x1f, 0xa2, 0x9c, 0x4b, 0x0, 0x32, 0x76, 0xe4, 0x32, 0x1e, 0x23,
    0x71, 0x17, 0xe2, 0x7f, 0x37, 0x35, 0x8f, 0x90, 0x73, 0xa4, 0x5, 0xe5, 0xcd,
    0x87, 0x11, 0x8d, 0xb7, 0x6a, 0x81, 0x7a, 0xea, 0x5e, 0x8a, 0xf4, 0x2, 0x8f,
    0xf9, 0x33, 0x95, 0x89, 0x45, 0xbd, 0x20, 0xbf, 0x7c, 0x76, 0xaa, 0x17, 0x89,
    0xa2, 0xd, 0x79, 0xf, 0x4, 0x56, 0xb4, 0xdb, 0xa1, 0x5, 0x8c, 0x92, 0xca, 0x4f,
    0xbb, 0x9f, 0x25, 0xb2, 0x18, 0xd9, 0x60, 0x87, 0x85, 0xa, 0xc5, 0x9f, 0x4a,
    0xa2, 0x5d, 0xf4, 0x98, 0x4f, 0xb5, 0x5, 0xc0, 0xa9, 0x3a, 0x57, 0x78, 0x77,
    0x0, 0xb0, 0xae, 0xde, 0xe1, 0xb7, 0xb7, 0x6a, 0x5e, 0x94, 0xb8, 0x86, 0x4,
    0xeb, 0x81, 0xe5, 0xd7, 0x8b, 0xcc, 0xac, 0x9f, 0x18, 0x38, 0x3e, 0xea, 0x8c,
    0x0, 0xa7, 0xe1, 0xc5, 0xa6, 0x47, 0x7e, 0x39, 0xfa, 0x8b, 0xe9, 0x5b, 0xb7,
    0x2c, 0x20, 0x72, 0xb0, 0xd3, 0xcb, 0x3b, 0x8, 0x2, 0x8d, 0x80, 0x73, 0xea,
    0x3c, 0xe, 0xcd, 0x2c, 0x1c, 0xd7, 0x58, 0x12, 0xd1, 0x77, 0x7c, 0x7d, 0xdb,
    0x83, 0x13, 0xa6, 0x3f, 0x51, 0xe2, 0x3c, 0xfe, 0xf7, 0x80, 0x18, 0xc3, 0x39,
    0x10, 0x64, 0xa, 0x8f, 0x7c, 0x66, 0x81, 0xeb, 0x18, 0xaf, 0xcb, 0x3b, 0x0,
    0x8c, 0x4a, 0xd4, 0xd6, 0x61, 0x98, 0x83, 0x19, 0xd0, 0xf1, 0x3d, 0x4e, 0xbc,
    0x59, 0x6b, 0x39, 0x3a, 0x32, 0x1c, 0x64, 0xbb, 0xcb, 0xa6, 0x9c, 0xf2, 0x44,
    0x5e, 0xf7, 0x1, 0xa7, 0x66, 0x43, 0xae, 0x31, 0xc8, 0x3, 0x6b, 0x73, 0xce,
    0xac, 0x49, 0xd6, 0xb2, 0xae, 0xf, 0xc0, 0x2f, 0xed, 0x55, 0xc2, 0xfb, 0x2b,
    0x16, 0xbb, 0x79, 0x91, 0x7c, 0xf4, 0x87, 0xf0, 0x20, 0x23, 0x3a, 0x96, 0x11,
    0x3e, 0x3b, 0x4b, 0xf, 0x85, 0x7c, 0xe6, 0x71, 0x46, 0xe1, 0xc, 0x8c, 0x40,
    0xe3, 0x4c, 0x3c, 0xa7, 0x3, 0x1a, 0x75, 0xc7, 0xb6, 0x80, 0x8b, 0x7a, 0x98,
    0xa5, 0x5f, 0x31, 0x27, 0x29, 0xe8, 0x1f, 0x36, 0x94, 0x90, 0xb6, 0xd3, 0x6d,
    0xc3, 0xc5, 0x1f, 0x8d, 0xbb, 0x9e, 0x36, 0xd1, 0x87, 0x25, 0xe8, 0xa6, 0xd1,
    0xb7, 0x1d, 0x72, 0x72, 0x11, 0xb4, 0x8c, 0x73, 0x78, 0x54, 0x9f, 0x92, 0x9c,
    0x84, 0xd4, 0x76, 0xb8, 0xbb, 0xb5, 0x62, 0xa4, 0x7b, 0xc5, 0x64, 0x62, 0xb4,
    0xf2, 0xb2, 0xc6, 0x20, 0xe7, 0xc9, 0x8, 0x74, 0x81, 0x2b, 0x41, 0xa7, 0x77,
    0xa3, 0x9b, 0xe3, 0x46, 0x2d, 0x2b, 0xc4, 0x42, 0x24, 0x7b, 0x7c, 0x8b, 0xdc,
    0x83, 0xb7, 0xd6, 0x47, 0x3a, 0xe7, 0xc7, 0xb, 0x45, 0xbd, 0x1f, 0x3c, 0xb9,
    0xa7, 0xb0, 0x9a, 0xfd, 0x74, 0x3d, 0x33, 0xd3, 0xc1, 0x94, 0x37, 0x91, 0x22,
    0xa7, 0x6f, 0x3a, 0x71, 0x66, 0x1f, 0x72, 0x10, 0xa1, 0xc3, 0x43, 0xd9, 0x19,
    0x75, 0xec, 0x6b, 0x3b, 0xbe, 0x77, 0xcc, 0xf2, 0x27, 0x3b, 0x97, 0x9, 0x34,
    0x8, 0x5c, 0x37, 0x5a, 0x66, 0xc2, 0xc5, 0x74, 0x9b, 0xac, 0x8, 0x3b, 0x6e,
    0x54, 0xa4, 0x1f, 0xd4, 0x5a, 0x8f, 0x59, 0xbb, 0x9f, 0xb1, 0xc8, 0xba, 0x6c,
    0x8, 0xb8, 0x74, 0xba, 0xc7, 0xf5, 0x2, 0xb8, 0xa9, 0x1e, 0x72, 0x1c, 0x5a,
    0xae, 0xa6, 0xa4, 0xf2, 0x37, 0x77, 0xef, 0x70, 0x17, 0xe4, 0xba, 0x65, 0x71,
    0xf5, 0xd, 0xa, 0xe2, 0x2b, 0x85, 0xd0, 0x2d, 0xfb, 0x80, 0x16, 0x21, 0x18,
    0x9e, 0x74, 0xc8, 0xaa, 0xa3, 0x50, 0x57, 0x96, 0x85, 0xae, 0x3f, 0xa5, 0xb8,
    0x18, 0x96, 0x33, 0x3, 0xe1, 0x43, 0x1f, 0x92, 0xac, 0xb9, 0xc6, 0x71, 0x3b,
    0xdc, 0x85, 0x57, 0x45, 0xc8, 0x9a, 0xb, 0x85, 0x8a, 0x94, 0xa7, 0xb2, 0xdb,
    0xc6, 0x63, 0xf6, 0xb7, 0xb9, 0x7b, 0xad, 0x12, 0x85, 0x7f, 0x8d, 0xd4, 0xcf,
    0x59, 0xab, 0x2, 0x27, 0x57, 0xc0, 0x1, 0x5c, 0xc6, 0xb, 0x85, 0x27, 0x4b, 0xa0,
    0x4b, 0xc8, 0x79, 0x97, 0x99, 0x56, 0x75, 0x8e, 0x11, 0xb2, 0xf8, 0x25, 0x46,
    0x97, 0x48, 0xb8, 0x87, 0x58, 0xb3, 0x46, 0x56, 0x65, 0x62, 0xb1, 0x2, 0x88,
    0x34, 0x1a, 0xb, 0xd5, 0xf, 0x2b, 0xd1, 0x85, 0x63, 0x72, 0xce, 0x19, 0x56,
    0x67, 0x8d, 0x69, 0x97, 0xb7, 0x54, 0x84, 0xe0, 0x4a, 0x4c, 0x9d, 0xc5, 0xac,
    0x62, 0x30, 0x4d, 0xb1, 0x5b, 0x3e, 0xa2, 0x41, 0x19, 0x28, 0xda, 0x47, 0x1b,
    0x3a, 0x4b, 0x90, 0xe7, 0xa8, 0xbb, 0x97, 0x72, 0x27, 0x6b, 0xe, 0x6f, 0x7c,
    0x21, 0xfe, 0xd8, 0x6e, 0x44, 0xc7, 0xa6, 0x4c, 0x14, 0x4, 0x86, 0xc1, 0x6c,
    0x2a, 0x31, 0xc4, 0xd5, 0x8, 0x4, 0xa7, 0x9b, 0x67, 0x81, 0x7a, 0x52, 0x54,
    0x45, 0x6a, 0x7c, 0x36, 0x90, 0x15, 0x90, 0x6f, 0x7b, 0xa2, 0x45, 0x19, 0x4b,
    0xa5, 0x4d, 0x37, 0x10, 0x1f, 0x48, 0x94, 0x59, 0x6, 0x19, 0xb4, 0xb5, 0x2,
    0xd5, 0x6, 0xd, 0x15, 0x53, 0xc5, 0xcd, 0x57, 0x20, 0x95, 0x29, 0x27, 0xf2,
    0x40, 0x0, 0x4c, 0xb4, 0x27, 0x4a, 0x3a, 0x63, 0xf5, 0xdc, 0xc5, 0xe8, 0x41,
    0x96, 0x65, 0x79, 0x5b, 0x2, 0xa3, 0x7a, 0xc0, 0x64, 0xa, 0xe2, 0x20, 0xb2,
    0x31, 0x13, 0x9f, 0x83, 0x33, 0x36, 0x8, 0x20, 0x3d, 0xa, 0x11, 0xb4, 0x7d,
    0x70, 0x5e, 0x18, 0x63, 0x57, 0x7a, 0x17, 0x48, 0xd4, 0xd5, 0x89, 0x5c, 0x75,
    0xb3, 0xd8, 0x82, 0x57, 0x82, 0x42, 0x3, 0x29, 0x46, 0x5c, 0x21, 0xb3, 0x9b,
    0x85, 0x9b, 0x0, 0xe0, 0xb9, 0x14, 0xc7, 0xa8, 0x61, 0x1f, 0xd7, 0x1c, 0x1a,
    0x68, 0x95, 0xac, 0x3b, 0x95, 0x5, 0x70, 0x7c, 0x3a, 0xe3, 0xa3, 0xf, 0x7c,
    0x29, 0x6d, 0x9b, 0x10, 0xc6, 0x24, 0xac, 0xd4, 0xfc, 0x58, 0xf0, 0xd9, 0x7a,
    0x4e, 0xdc, 0x1e, 0xe5, 0x7a, 0xa1, 0x6c, 0x24, 0x92, 0x35, 0x92, 0x89, 0x26,
    0xbc, 0x61, 0x3a, 0x12, 0x4f, 0xd8, 0x1b, 0x1d, 0x41, 0x8a, 0xc7, 0xe8, 0xb0,
    0x8a, 0x2, 0x86, 0x21, 0x51, 0xa6, 0x95, 0xa2, 0x35, 0x4a, 0x87, 0x75, 0x1f,
    0x48, 0x62, 0x53, 0x67, 0x3a, 0xcf, 0x2, 0xb8, 0x35, 0xab, 0xc3, 0x6b, 0xaa,
    0xc0, 0xb1, 0xd6, 0x82, 0x0, 0x51, 0x24, 0x20, 0x50, 0x8c, 0x14, 0xa7, 0x39,
    0x14, 0x28, 0x69, 0x59, 0x2d, 0x5, 0x6b, 0x79, 0x29, 0x9e, 0x9, 0x53, 0x27,
    0xb0, 0xf7, 0x2e, 0x70, 0x1, 0xca, 0x10, 0x32, 0xa, 0x2d, 0xd8, 0x9a, 0xe1,
    0xd2, 0x77, 0x5e, 0x4b, 0x42, 0x99, 0xf5, 0x74, 0xd5, 0x3b, 0xb9, 0x96, 0x21,
    0x81, 0xd1, 0xec, 0x46, 0x7d, 0x42, 0xf, 0x95, 0xb8, 0xb7, 0x10, 0x6, 0x1e,
    0x1e, 0x4c, 0xa7, 0x50, 0x4a, 0x8a, 0xba, 0x86, 0xae, 0x5b, 0x31, 0x10, 0xc9,
    0x49, 0xa8, 0xd0, 0x77, 0x29, 0xb, 0x53, 0xa1, 0xa7, 0x51, 0xae, 0x1d, 0x19,
    0x6, 0xa2, 0xd9, 0xc6, 0x92, 0xa9, 0x88, 0x85, 0x10, 0x3, 0x27, 0xb2, 0x7, 0x52,
    0xa4, 0xb1, 0xe, 0xdb, 0x94};

unsigned char tls_fragment_2[] = {0xff, 0x1a, 0x89, 0x6a, 0x0, 0xb4, 0x5c, 0xc2,
    0x82, 0x97, 0x47, 0x8f, 0xce, 0x85, 0x85, 0xdb, 0xb9, 0x71, 0xe2, 0xba, 0x9c,
    0x6d, 0xb1, 0x2a, 0x8a, 0x64, 0xb5, 0x4e, 0x34, 0x60, 0xd5, 0x6, 0x85, 0x2e,
    0xa7, 0xc0, 0x82, 0xfc, 0x7, 0x6c, 0x95, 0x16, 0x5, 0xcc, 0xc1, 0x15, 0x92,
    0x47, 0xd1, 0x66, 0x0, 0xce, 0x26, 0xc4, 0x86, 0x79, 0x50, 0x48, 0x9b, 0x77,
    0xa9, 0x80, 0x7d, 0x7d, 0x86, 0x8f, 0xc8, 0x97, 0x10, 0x5e, 0x61, 0x1a, 0x8b,
    0x77, 0x4, 0x58, 0xa, 0xb3, 0x8, 0xb5, 0x41, 0x6, 0x70, 0xa6, 0x5f, 0xca, 0x17,
    0x75, 0x11, 0x75, 0xd8, 0xc2, 0x14, 0x26, 0xd7, 0x8a, 0x7a, 0x78, 0x7f, 0x12,
    0x8c, 0x20, 0x1e, 0xc6, 0x21, 0x3d, 0xb7, 0xb4, 0x76, 0xcb, 0xc6, 0x30, 0xa,
    0x77, 0xa8, 0x25, 0x32, 0x6b, 0xc9, 0xbb, 0xf5, 0x40, 0x8b, 0x48, 0x4a, 0xc1,
    0x7d, 0xf1, 0x2f, 0xb4, 0xd0, 0xaa, 0x7e, 0xc5, 0x9c, 0xbb, 0x92, 0x54, 0x68,
    0x73, 0x61, 0x42, 0xca, 0x9c, 0x29, 0x49, 0xce, 0xec, 0xe9, 0x18, 0xee, 0xfa,
    0x48, 0x30, 0x37, 0x9b, 0x31, 0xb, 0xc5, 0x8b, 0x96, 0x15, 0xc9, 0x50, 0x37,
    0xf5, 0x3c, 0x94, 0x1a, 0xb6, 0x1e, 0xe7, 0xeb, 0x6a, 0xa9, 0x58, 0x7f, 0xf8,
    0xf0, 0x76, 0xa2, 0x31, 0x47, 0x5d, 0x23, 0x41, 0xc0, 0xbb, 0x85, 0x3d, 0x4f,
    0x8c, 0x7b, 0xb0, 0x99, 0xdc, 0xef, 0xee, 0xf6, 0x1e, 0x9d, 0xa6, 0x9d, 0x75,
    0x57, 0x5e, 0x1a, 0xcd, 0xf4, 0xf7, 0x77, 0xe6, 0x0, 0x1d, 0x0, 0x20, 0xe5,
    0xa7, 0x6d, 0xcc, 0x93, 0x9, 0x7c, 0xe0, 0x1f, 0xb, 0xa1, 0xa, 0xbc, 0x6d, 0x25,
    0x2c, 0xf6, 0xa6, 0xab, 0xfb, 0xb2, 0xbb, 0xb9, 0xcd, 0xc7, 0x2e, 0x38, 0x69,
    0xa, 0x26, 0xd3, 0x2b, 0x0, 0x23, 0x0, 0x0, 0x0, 0x12, 0x0, 0x0, 0x4a, 0x4a,
    0x0, 0x1, 0x0};

unsigned char quic_fragment_1[] = {0xc5, 0x0, 0x0, 0x0, 0x1, 0x8, 0x93, 0xa1,
    0xa4, 0x58, 0x2b, 0xb3, 0x55, 0x99, 0x0, 0x0, 0x44, 0xd0, 0xbe, 0x2c, 0x2d,
    0xc6, 0xc, 0x3a, 0xb3, 0x9a, 0x40, 0x2, 0xbb, 0xd3, 0xf1, 0x60, 0x80, 0xf7,
    0xed, 0x2a, 0x8e, 0x8a, 0x72, 0x62, 0x13, 0x24, 0x33, 0x0, 0xdc, 0x94, 0x79,
    0xc9, 0x9b, 0x89, 0xd8, 0xe9, 0x5c, 0x34, 0x45, 0x50, 0x8a, 0x79, 0x4a, 0x56,
    0x27, 0x9, 0xa9, 0x29, 0xe3, 0x30, 0xa9, 0xcd, 0xfe, 0xd4, 0x71, 0x58, 0x40,
    0xeb, 0x7f, 0x43, 0xb2, 0x89, 0x7, 0xb6, 0x61, 0x49, 0xc5, 0x7f, 0x90, 0x6,
    0x25, 0xe2, 0x9f, 0x18, 0xb4, 0xfc, 0x38, 0xc3, 0x73, 0x71, 0x4a, 0xc, 0xe,
    0xd9, 0x7d, 0x30, 0x80, 0x5c, 0x76, 0x5e, 0xa7, 0x15, 0x94, 0x21, 0x63, 0x19,
    0x7f, 0x10, 0x45, 0x17, 0xd0, 0xbf, 0x47, 0x87, 0x9b, 0xb5, 0x4, 0xfc, 0x97,
    0x19, 0x8a, 0x2c, 0x5a, 0x8d, 0x59, 0xd9, 0x71, 0xee, 0xdb, 0x9, 0xaf, 0xcd,
    0x91, 0xd6, 0xaa, 0xe6, 0x9, 0x28, 0xb3, 0x39, 0x7b, 0x24, 0xe9, 0x44, 0x4e,
    0x67, 0xeb, 0xf9, 0x6e, 0xb9, 0x5d, 0x76, 0xbb, 0x15, 0xa7, 0xf1, 0x20, 0x49,
    0xa, 0xc4, 0x83, 0xb5, 0x1c, 0x69, 0xe7, 0x86, 0xa3, 0x98, 0xf5, 0xc6, 0x76,
    0x9c, 0x1f, 0xcc, 0xd3, 0xf3, 0x43, 0xe, 0x72, 0x34, 0x66, 0xf4, 0x5e, 0xf1,
    0x54, 0xe4, 0xd9, 0x5b, 0x55, 0xed, 0x8a, 0xf3, 0xc7, 0x47, 0xc, 0xee, 0x81,
    0xc3, 0x1a, 0x28, 0xb1, 0xe, 0x93, 0xb0, 0x79, 0x48, 0xe6, 0x69, 0x62, 0xc9,
    0x5c, 0xec, 0x98, 0xe3, 0xd6, 0x66, 0x7e, 0xf0, 0x7a, 0xe4, 0xcf, 0x71, 0x85,
    0x8a, 0x64, 0x79, 0xc5, 0xa1, 0x7f, 0x1e, 0xd6, 0x69, 0x6b, 0xe1, 0xc5, 0x72,
    0x47, 0xef, 0xe7, 0x4e, 0xa, 0x1b, 0xa6, 0xb8, 0x26, 0xa9, 0xf3, 0xcb, 0xff,
    0x4f, 0x48, 0x53, 0xcb, 0xd2, 0x5, 0x3b, 0x18, 0x6a, 0xe8, 0x27, 0xc7, 0x0,
    0xac, 0xbd, 0xbd, 0x5b, 0xc5, 0x80, 0xaf, 0x69, 0x91, 0x4b, 0x36, 0xeb, 0xe0,
    0x6e, 0x32, 0xda, 0xcf, 0xd8, 0x42, 0x5, 0x3a, 0x4a, 0xd0, 0x4b, 0x13, 0xad,
    0x82, 0xf2, 0x8a, 0x6e, 0x64, 0xbf, 0xa6, 0x72, 0x9a, 0x9d, 0x94, 0x72, 0x8e,
    0xe4, 0xfe, 0x75, 0x34, 0x50, 0xac, 0x55, 0x87, 0x5a, 0x5c, 0x90, 0xcb, 0x5e,
    0xe3, 0x58, 0x58, 0x99, 0x37, 0x9b, 0x9c, 0xd5, 0x28, 0xbf, 0xae, 0x1b, 0x3a,
    0xab, 0x89, 0x8, 0xbe, 0x24, 0x13, 0x61, 0x25, 0x97, 0x49, 0xbe, 0x2a, 0x6f,
    0x77, 0x47, 0x4e, 0x71, 0xc, 0x45, 0xa3, 0xad, 0xec, 0x1b, 0x8a, 0x1a, 0x60,
    0x4b, 0x7a, 0xa, 0xa0, 0x5b, 0x8a, 0xec, 0x69, 0xa1, 0xf5, 0xca, 0xc0, 0xf9,
    0xbc, 0x85, 0x33, 0xf2, 0x8a, 0xd4, 0xab, 0xec, 0x63, 0xf8, 0xfe, 0x34, 0xbe,
    0x4d, 0xfe, 0xba, 0xfd, 0x2f, 0x43, 0x98, 0x8, 0xc1, 0x4b, 0x53, 0x69, 0x48,
    0xb7, 0x37, 0x82, 0x29, 0x71, 0x6b, 0x57, 0x5d, 0xe9, 0x24, 0x43, 0x3f, 0x82,
    0x83, 0xb0, 0xe6, 0x95, 0x58, 0x5, 0x48, 0x35, 0x9c, 0xd4, 0x3a, 0xc6, 0x90,
    0xff, 0x75, 0x4e, 0x87, 0xbb, 0x29, 0x46, 0xae, 0x22, 0xc4, 0x8e, 0x55, 0x8c,
    0xa3, 0x16, 0x17, 0xf7, 0x92, 0xbd, 0x67, 0xa5, 0x3b, 0x34, 0x3e, 0xf4, 0xf4,
    0xc, 0xd8, 0xb5, 0xbe, 0xdb, 0xd6, 0x71, 0x57, 0x43, 0x3c, 0xe, 0xd4, 0xb9,
    0x52, 0xd3, 0x69, 0xec, 0x88, 0x24, 0xd1, 0xa4, 0xf1, 0xec, 0xab, 0xe2, 0xf3,
    0x6c, 0xa9, 0xdf, 0xb9, 0xe0, 0x25, 0x5b, 0x20, 0xb5, 0x39, 0x5f, 0x21, 0x86,
    0x55, 0x10, 0x52, 0x74, 0x4c, 0x2f, 0x11, 0xe6, 0xf2, 0xad, 0xdb, 0xe7, 0x60,
    0x9, 0x33, 0xb7, 0xa2, 0xd2, 0xc9, 0x73, 0xd8, 0x23, 0x20, 0x5, 0xd2, 0x14, 0x4,
    0x83, 0x9a, 0x4c, 0x8f, 0x8c, 0x71, 0xb9, 0x56, 0xcc, 0x1, 0x3d, 0x8, 0xe2,
    0x62, 0x66, 0xed, 0x5b, 0xd9, 0x3c, 0xc6, 0x9b, 0x3c, 0xeb, 0x89, 0xe5, 0xee,
    0xcf, 0xfa, 0xa6, 0x16, 0xe2, 0x42, 0x8f, 0x26, 0xf5, 0x4a, 0xf0, 0xa, 0xa1,
    0xfa, 0x16, 0xc7, 0xcf, 0x98, 0x44, 0xea, 0xcc, 0x3f, 0x80, 0xfc, 0x1a, 0x63,
    0x36, 0x9d, 0x93, 0x18, 0xf7, 0xaa, 0x4f, 0x26, 0x10, 0x19, 0x17, 0xd5, 0x64,
    0xc3, 0x57, 0xf0, 0x87, 0x28, 0xee, 0x2f, 0x8, 0x2, 0x6f, 0x25, 0x17, 0x93,
    0xf7, 0x15, 0xd1, 0x4, 0x5a, 0xb, 0xf9, 0x48, 0x43, 0xef, 0x7a, 0xf6, 0x86,
    0x41, 0x6c, 0x86, 0x99, 0xf0, 0xef, 0x6b, 0xa9, 0xf5, 0xb7, 0x9c, 0x99, 0x25,
    0xb3, 0x9c, 0xf, 0xb9, 0x63, 0xa0, 0x90, 0x1c, 0xd3, 0x20, 0xa1, 0x80, 0x46,
    0x1b, 0xec, 0xd6, 0xe7, 0x76, 0xf0, 0x1, 0x3c, 0xc5, 0x1c, 0xca, 0xe7, 0xcb,
    0x2a, 0x3d, 0xa2, 0xea, 0xc0, 0xe8, 0xc5, 0x9c, 0x85, 0x41, 0xa8, 0x3d, 0x6f,
    0xdf, 0xc3, 0x6c, 0x74, 0xef, 0xdc, 0x79, 0xda, 0xae, 0x60, 0x1c, 0x91, 0x4b,
    0x60, 0x22, 0x2d, 0x6b, 0x81, 0x44, 0x64, 0xc8, 0xd0, 0xc1, 0x1c, 0x29, 0x5c,
    0xa3, 0xe9, 0x7a, 0x6c, 0x12, 0x7c, 0x97, 0x9b, 0xe4, 0x6, 0xc1, 0x8, 0x1d,
    0xfd, 0xd4, 0xb7, 0xbe, 0x4c, 0xf3, 0x1, 0x1b, 0x25, 0x57, 0x44, 0x2c, 0x0,
    0x39, 0xcd, 0xc1, 0xc4, 0xbd, 0xf6, 0xcb, 0xea, 0x3a, 0x36, 0x94, 0x9f, 0xcf,
    0x24, 0x95, 0x22, 0xc5, 0xa7, 0xba, 0x1a, 0xb2, 0xed, 0xb5, 0x69, 0x37, 0x22,
    0xa9, 0x44, 0x10, 0x92, 0x98, 0xd3, 0x6b, 0x2e, 0x5a, 0xb2, 0x3f, 0x16, 0x5,
    0xdf, 0xc3, 0x48, 0xa0, 0x97, 0xaf, 0x77, 0xb8, 0xde, 0xa1, 0x59, 0xc, 0xa6,
    0xf1, 0xb5, 0x7f, 0x17, 0x78, 0x78, 0xf4, 0x37, 0xf8, 0xae, 0xaa, 0x4a, 0xb5,
    0x3d, 0x21, 0x56, 0xfb, 0xac, 0xad, 0x99, 0xdb, 0xdf, 0x2b, 0x27, 0x39, 0x19,
    0x5, 0x84, 0x7d, 0x9c, 0x57, 0xa6, 0xf5, 0x56, 0x4e, 0x13, 0xb2, 0x1a, 0x1a,
    0xb2, 0x40, 0x54, 0x74, 0x46, 0xa, 0x42, 0xb3, 0x91, 0xf0, 0x89, 0xfe, 0xa0,
    0x49, 0x75, 0xd5, 0x12, 0x0, 0x54, 0x2a, 0x56, 0x8, 0x95, 0xcc, 0xed, 0x8e,
    0x8f, 0x26, 0x74, 0x39, 0xb3, 0xad, 0x4f, 0xf, 0xd0, 0x25, 0x5e, 0x3b, 0x29,
    0xab, 0xf6, 0x14, 0xc, 0x2b, 0xa, 0x2c, 0xb9, 0xd8, 0x47, 0xde, 0xb2, 0x36,
    0x65, 0xa1, 0x2c, 0xd, 0x71, 0xa9, 0xa0, 0x61, 0xb5, 0x5a, 0x36, 0x2f, 0x41,
    0x73, 0x85, 0x93, 0xf4, 0x2, 0x5d, 0xf3, 0x7a, 0x30, 0x25, 0xfc, 0x14, 0xb6,
    0x9f, 0xde, 0x98, 0xe9, 0x2a, 0xec, 0x14, 0x85, 0x5c, 0xc4, 0x5f, 0x58, 0x55,
    0x69, 0x18, 0x11, 0xb9, 0x1a, 0x30, 0x6b, 0xaa, 0x2, 0xab, 0x9c, 0x93, 0xc9,
    0xff, 0x2f, 0xf, 0x38, 0xb3, 0xcd, 0x43, 0x1b, 0x64, 0x31, 0x19, 0xe1, 0x86,
    0x5d, 0x62, 0xa1, 0x2a, 0x82, 0xed, 0xde, 0xbc, 0x34, 0xda, 0x32, 0xd2, 0xec,
    0x1, 0x40, 0x6c, 0x53, 0x4e, 0x59, 0x96, 0x2f, 0x7a, 0x91, 0xf6, 0x1a, 0x4e,
    0x13, 0x70, 0x95, 0x34, 0xda, 0x76, 0x69, 0xc3, 0xe6, 0xb6, 0x2f, 0x9d, 0x2e,
    0x54, 0x30, 0xe6, 0x6e, 0x10, 0x69, 0x32, 0x59, 0x5f, 0x7f, 0xcb, 0x4d, 0xb4,
    0x67, 0x91, 0x88, 0x4c, 0xdc, 0xec, 0x8f, 0xfd, 0xa5, 0xf9, 0x5c, 0x3f, 0xb1,
    0xc9, 0x83, 0xc8, 0x47, 0xb5, 0x9c, 0x64, 0x7c, 0x2, 0xa1, 0xf7, 0x9d, 0x43,
    0x63, 0xc2, 0x68, 0x33, 0x69, 0x47, 0x6, 0x61, 0xa6, 0x33, 0xf8, 0x65, 0x52,
    0x87, 0xb6, 0xdf, 0xb5, 0x23, 0x45, 0x6e, 0x77, 0x36, 0xfd, 0x83, 0xc4, 0x9,
    0x59, 0x3c, 0x25, 0x68, 0x27, 0x5a, 0x10, 0x54, 0xca, 0x76, 0xaa, 0x6, 0x48,
    0xef, 0xd1, 0xa9, 0x2f, 0x6d, 0x8c, 0xe6, 0x52, 0x38, 0x66, 0x98, 0xc8, 0x62,
    0x20, 0x54, 0x42, 0x2e, 0x7, 0xa9, 0x35, 0x15, 0xca, 0xd0, 0x11, 0xce, 0xc8,
    0x33, 0xbb, 0x81, 0x4f, 0x6e, 0x3b, 0x6e, 0xa6, 0xbe, 0x7d, 0x82, 0xfe, 0x5a,
    0x90, 0xc4, 0x7a, 0x58, 0xa5, 0xe0, 0x87, 0x82, 0x14, 0x4c, 0x91, 0xb6, 0xa7,
    0xfc, 0xb4, 0x75, 0x9e, 0x8b, 0x7d, 0x6a, 0x8b, 0x7d, 0xcc, 0xe7, 0xf3, 0xa7,
    0xbb, 0x55, 0x2f, 0x76, 0x2, 0x96, 0x4a, 0x75, 0x3d, 0x8e, 0xed, 0xe5, 0x2,
    0xaa, 0xba, 0xe6, 0x8, 0x36, 0xfc, 0xc1, 0x84, 0xff, 0xee, 0xfa, 0x1f, 0x2d,
    0xcc, 0xec, 0xaf, 0x80, 0xb9, 0x32, 0x1, 0x49, 0xd4, 0x84, 0xab, 0xe7, 0x35,
    0x4e, 0x49, 0x37, 0x96, 0x29, 0xf4, 0xdb, 0xa5, 0x98, 0x5c, 0x99, 0x43, 0x2e,
    0xfa, 0xdf, 0x35, 0x3b, 0x18, 0x5e, 0x9c, 0xd9, 0xb3, 0x24, 0x2f, 0x0, 0x2e,
    0x47, 0xb7, 0x23, 0x3c, 0x54, 0x32, 0xbb, 0x7f, 0x46, 0xf7, 0x3e, 0x7b, 0xa6,
    0x3a, 0x27, 0xeb, 0xd9, 0xf5, 0x68, 0x8d, 0x34, 0x67, 0x31, 0x44, 0x2e, 0x4,
    0xaf, 0xf0, 0x84, 0x3a, 0xab, 0xbf, 0xe, 0x6e, 0xc1, 0x9c, 0xde, 0xbb, 0xe5,
    0x39, 0x51, 0x55, 0x3e, 0xbc, 0x6b, 0x89, 0xbd, 0x8e, 0x88, 0x54, 0x15, 0x1f,
    0xe8, 0xcb, 0x43, 0xee, 0x4a, 0x20, 0x25, 0x9c, 0xe9, 0xf6, 0x7, 0x98, 0x1a,
    0x39, 0x4e, 0x34, 0x8c, 0x95, 0x5c, 0xa0, 0xbd, 0x10, 0xa3, 0x85, 0xbc, 0xe,
    0xf3, 0xc3, 0x15, 0x1a, 0x37, 0xf3};

unsigned char quic_fragment_2[] = {0xcd, 0x0, 0x0, 0x0, 0x1, 0x8, 0x93, 0xa1,
    0xa4, 0x58, 0x2b, 0xb3, 0x55, 0x99, 0x0, 0x0, 0x44, 0xd0, 0x40, 0xd7, 0xe4,
    0x1d, 0x14, 0x70, 0xec, 0xc2, 0x2d, 0xef, 0xf8, 0xb5, 0x1, 0x56, 0xb7, 0x2e,
    0x42, 0xb0, 0x18, 0x6a, 0xe1, 0xc0, 0x81, 0x3f, 0xf8, 0xf9, 0x52, 0xfd, 0xe,
    0x99, 0x9f, 0x86, 0x7c, 0x82, 0xaf, 0xbc, 0xb, 0x53, 0xd8, 0x70, 0x62, 0x6,
    0xcc, 0x97, 0x31, 0x44, 0x1b, 0x31, 0xb8, 0x5a, 0x6b, 0xe2, 0x13, 0x85, 0x3b,
    0x84, 0x6, 0xdc, 0xef, 0x4b, 0xa9, 0x2d, 0xcb, 0xc7, 0xa9, 0xd8, 0x19, 0x7, 0x7,
    0x21, 0x59, 0x53, 0x87, 0xee, 0xe0, 0x87, 0x84, 0xe7, 0x87, 0x14, 0x84, 0x8d,
    0xa6, 0xee, 0x6d, 0xe4, 0x7c, 0x0, 0x43, 0x56, 0xcf, 0x5, 0x4f, 0x6f, 0x68,
    0x9a, 0x8, 0xc5, 0x8a, 0xb6, 0x6, 0xd9, 0xee, 0xc6, 0x45, 0x57, 0xd6, 0x77,
    0xf7, 0x98, 0x3d, 0x8a, 0x95, 0xe2, 0x24, 0x15, 0xe1, 0x9e, 0x60, 0xe6, 0x26,
    0x52, 0xfb, 0xf1, 0xb1, 0x1d, 0x43, 0xc9, 0x5c, 0x54, 0x6, 0xce, 0x75, 0x36,
    0x14, 0xb8, 0xff, 0xc1, 0x3e, 0x6e, 0xdb, 0xa6, 0xe6, 0xc9, 0x39, 0x32, 0x0,
    0x90, 0x3e, 0x18, 0x4c, 0x37, 0x8d, 0x2b, 0xa, 0xb5, 0x10, 0x8b, 0x29, 0xe1,
    0x27, 0x4a, 0x82, 0xec, 0x9c, 0x85, 0x5f, 0xf6, 0xcc, 0xfd, 0x36, 0xc9, 0x2f,
    0xb7, 0x5e, 0x9d, 0x18, 0xe5, 0x29, 0xb5, 0xc1, 0x7d, 0x2a, 0x6e, 0x65, 0xc0,
    0x6b, 0x28, 0x89, 0x82, 0x57, 0x7c, 0xce, 0x2b, 0xd0, 0xd4, 0xb8, 0xf5, 0x63,
    0xd0, 0xc3, 0x84, 0xdd, 0xa0, 0x95, 0xf3, 0x54, 0x81, 0x48, 0xe5, 0x2e, 0xd1,
    0xe7, 0xf4, 0xeb, 0xd0, 0xd5, 0x10, 0x9f, 0x3b, 0xd6, 0x9e, 0x54, 0x9, 0x96,
    0x83, 0x38, 0x69, 0x7b, 0x72, 0xba, 0xe9, 0x8c, 0x8f, 0xb, 0x57, 0x12, 0x4a,
    0x7c, 0x75, 0x28, 0x85, 0xfd, 0x25, 0x37, 0xd, 0x9, 0xb6, 0x3e, 0xb7, 0x4a,
    0x3d, 0xcc, 0x44, 0xf3, 0x38, 0xdd, 0x45, 0x19, 0x71, 0x8d, 0x5f, 0xc9, 0x9a,
    0xd3, 0x72, 0xa0, 0xae, 0x25, 0xb2, 0x86, 0x6d, 0x45, 0x8f, 0x70, 0xce, 0xbe,
    0xfd, 0x67, 0x32, 0x94, 0x2d, 0xef, 0x3f, 0x24, 0xa1, 0x1a, 0xbb, 0xaf, 0x40,
    0x20, 0xcb, 0x40, 0x67, 0x52, 0xea, 0x4f, 0xb8, 0xde, 0x17, 0x38, 0xf6, 0xd4,
    0xf4, 0x87, 0x3d, 0x6a, 0xe1, 0xe, 0x33, 0xc8, 0xc4, 0xf3, 0x5b, 0x91, 0x14,
    0x2a, 0xf3, 0x9b, 0xf3, 0xec, 0x74, 0xf1, 0xd5, 0xde, 0xc, 0x12, 0x7, 0xde,
    0x31, 0xd5, 0x76, 0xbd, 0x9b, 0x64, 0x5d, 0xdf, 0xc8, 0x22, 0xc0, 0xff, 0xc2,
    0x1a, 0xf3, 0xd5, 0xc3, 0x42, 0xfd, 0x2f, 0xfd, 0x58, 0x28, 0x16, 0xb5, 0x18,
    0x98, 0x70, 0x96, 0x53, 0x9, 0xd8, 0x48, 0x50, 0x8f, 0x7, 0x6c, 0x66, 0xb1,
    0xff, 0x3f, 0xe4, 0xd, 0x28, 0x1b, 0xb0, 0x1e, 0xa, 0xe3, 0x49, 0x8e, 0x8b,
    0x99, 0x3d, 0x4d, 0x86, 0x37, 0x25, 0x7c, 0x4, 0x25, 0xa7, 0xa8, 0x4e, 0x15,
    0x49, 0xed, 0xbe, 0x2, 0x4a, 0x9d, 0x20, 0x89, 0xc4, 0x4a, 0xeb, 0xfd, 0x31,
    0x89, 0x6, 0xdd, 0x53, 0x7b, 0xc4, 0x18, 0xfc, 0x7d, 0x4f, 0x8a, 0xa9, 0x2c,
    0x15, 0x6f, 0xa, 0xe2, 0xf2, 0x61, 0xcd, 0xae, 0xfc, 0xc1, 0x84, 0x36, 0xa8,
    0xc4, 0x2, 0x1a, 0xf4, 0xa0, 0x9b, 0x6b, 0x64, 0xe, 0xd5, 0x8, 0x82, 0xf2, 0x33,
    0x8c, 0x2a, 0xe4, 0x8e, 0x8e, 0x87, 0x19, 0xd8, 0x2a, 0x65, 0x71, 0xa7, 0xc9,
    0x78, 0x9e, 0x77, 0x3b, 0xc8, 0xf2, 0xaf, 0x2b, 0xf6, 0xda, 0x25, 0x81, 0x6f,
    0xff, 0x48, 0xb4, 0x18, 0xd5, 0x20, 0xbe, 0x2f, 0xc7, 0x8d, 0xb2, 0xce, 0x23,
    0x1c, 0xb6, 0x36, 0xdc, 0x60, 0xf3, 0xa5, 0xd4, 0xab, 0xa5, 0xfa, 0x6f, 0x1c,
    0x5c, 0x9f, 0x37, 0x8, 0x3b, 0x3a, 0xb, 0x4, 0x73, 0x98, 0xdf, 0xed, 0x5c, 0xa7,
    0x4b, 0xd3, 0x80, 0x6f, 0xa7, 0xa0, 0xa5, 0xaf, 0x4c, 0x61, 0x86, 0xb6, 0x91,
    0x3, 0x75, 0x2f, 0x37, 0x82, 0x6, 0xf9, 0x64, 0x2, 0x4, 0x81, 0x3b, 0x96, 0x5,
    0x8, 0xb2, 0x70, 0x8b, 0x3, 0x8, 0xaf, 0x12, 0xc8, 0xe4, 0x71, 0xe3, 0x66, 0x8e,
    0x98, 0x74, 0xc5, 0x42, 0x9e, 0x68, 0xa9, 0xf0, 0x5f, 0xab, 0xe4, 0x7e, 0xeb,
    0xb8, 0xfe, 0xb0, 0x32, 0x6c, 0x9b, 0x64, 0x50, 0x87, 0xc9, 0xc5, 0x74, 0xe9,
    0x54, 0xe, 0xf3, 0x50, 0x23, 0x24, 0xf2, 0xaf, 0x9a, 0x2e, 0xf5, 0x8a, 0x55,
    0x56, 0x23, 0x53, 0xfe, 0x49, 0x11, 0x82, 0xa4, 0x94, 0xa4, 0x3f, 0xe5, 0xe,
    0x34, 0xc1, 0x25, 0x7b, 0x88, 0xc8, 0x99, 0xa3, 0xb1, 0x3e, 0x0, 0x7c, 0x20,
    0xe1, 0x74, 0xb3, 0x16, 0x28, 0xac, 0xd3, 0x70, 0x95, 0x1c, 0xa0, 0x6b, 0x86,
    0x22, 0x2, 0xce, 0x7d, 0xa4, 0xbb, 0xde, 0x19, 0x3f, 0xc9, 0xe4, 0xdf, 0xf,
    0x9a, 0xc, 0xe6, 0x58, 0x12, 0x2, 0x4, 0x94, 0x24, 0x4e, 0xda, 0x57, 0x11, 0x8d,
    0xb5, 0xbf, 0x6e, 0xa8, 0xbd, 0x83, 0xcd, 0xc, 0xb0, 0x88, 0xf9, 0xe8, 0x82,
    0x23, 0xa6, 0x45, 0x15, 0xf0, 0x4c, 0xb8, 0x55, 0xe4, 0x1a, 0x7f, 0x38, 0x44,
    0x4f, 0xf4, 0x60, 0x60, 0x2a, 0xa6, 0xfb, 0xa8, 0x16, 0xcc, 0xbf, 0x83, 0xd0,
    0x40, 0x59, 0xa3, 0xe6, 0x6f, 0x62, 0x7c, 0x4d, 0x1a, 0x13, 0x2c, 0xc4, 0xff,
    0x77, 0xc8, 0x7c, 0x71, 0xea, 0xa7, 0x6, 0x4b, 0x5a, 0x58, 0xdc, 0x4e, 0xf8,
    0xc2, 0xb3, 0x7a, 0xea, 0xa, 0xf3, 0x66, 0x8a, 0x8b, 0xa9, 0x5, 0xbd, 0xc4,
    0xdf, 0x9a, 0x42, 0x4d, 0x92, 0x82, 0x59, 0x80, 0xc3, 0x2e, 0x1b, 0xdb, 0xb6,
    0xab, 0xdc, 0x87, 0x6c, 0xbb, 0x91, 0xd9, 0xfc, 0xf4, 0xe5, 0xf9, 0xb3, 0x9a,
    0x4b, 0xd0, 0x71, 0x33, 0xdc, 0x29, 0xd6, 0x61, 0x16, 0xaa, 0xb0, 0x88, 0x54,
    0x39, 0x66, 0x25, 0x9b, 0xb0, 0x9d, 0xac, 0x17, 0xd4, 0xab, 0x7d, 0x26, 0xcb,
    0xf2, 0x8f, 0x10, 0x80, 0x6a, 0xa0, 0xbe, 0x4e, 0x34, 0x7d, 0xc3, 0xb5, 0xb9,
    0x29, 0x3, 0x3c, 0x83, 0xd6, 0x4a, 0x21, 0x8f, 0x86, 0xd4, 0x92, 0xc4, 0xfc,
    0x53, 0xec, 0xcc, 0x35, 0x46, 0xa2, 0x44, 0x64, 0x51, 0x7d, 0xd9, 0x14, 0x21,
    0x74, 0x58, 0x3d, 0x66, 0xcb, 0x59, 0x22, 0x3e, 0x55, 0x81, 0x61, 0xcd, 0xfe,
    0x49, 0x42, 0xd, 0x39, 0xc7, 0x65, 0x34, 0x39, 0x57, 0xd1, 0x86, 0x1b, 0x23,
    0xf5, 0x4b, 0x39, 0xb, 0x23, 0x50, 0x2a, 0x29, 0x29, 0x3b, 0xc2, 0x82, 0xf8,
    0x56, 0x58, 0x91, 0x42, 0x56, 0xb9, 0x68, 0xcb, 0xe7, 0x15, 0xf7, 0x53, 0x26,
    0x92, 0xab, 0x98, 0x94, 0x40, 0x3d, 0xa8, 0x3f, 0x8c, 0x98, 0xc3, 0x37, 0x6c,
    0x31, 0xba, 0xfa, 0xf5, 0x6f, 0xa4, 0x13, 0xb8, 0xe4, 0xe2, 0x27, 0xb0, 0xd3,
    0x5a, 0x17, 0xc6, 0x64, 0x9, 0x9d, 0xcd, 0x8b, 0x42, 0x0, 0x5d, 0x1f, 0xe0,
    0x2f, 0x78, 0x95, 0xfa, 0x46, 0x72, 0x2c, 0x6d, 0xfc, 0x84, 0x78, 0x1c, 0x36,
    0x14, 0x2e, 0xbb, 0x42, 0x77, 0x70, 0x23, 0xd9, 0x7c, 0x6d, 0xb4, 0xbc, 0xb8,
    0x78, 0xb1, 0xec, 0x3d, 0x8f, 0x6d, 0xbb, 0xbf, 0x75, 0x57, 0x8a, 0x4c, 0x9f,
    0x48, 0x62, 0x55, 0xdd, 0xb5, 0x40, 0x9d, 0xa8, 0x45, 0xd9, 0xf0, 0xfd, 0xd2,
    0xf1, 0xa5, 0x54, 0xe, 0xc7, 0x89, 0x52, 0x5, 0x5a, 0x9a, 0x82, 0x27, 0x9e,
    0xf1, 0xe4, 0x2a, 0x4, 0x78, 0x5f, 0xd2, 0x7d, 0x27, 0xb5, 0x1f, 0xea, 0xb7,
    0xba, 0x72, 0x2b, 0x6, 0x28, 0x2a, 0xa3, 0xd1, 0xb, 0xe0, 0xd8, 0xdf, 0xfe, 0x0,
    0xa9, 0xbc, 0x4e, 0x10, 0xaa, 0x65, 0xee, 0xb7, 0x19, 0xf, 0x26, 0x8b, 0x47,
    0x7a, 0xee, 0xa3, 0x6a, 0x6f, 0x35, 0xfa, 0x24, 0xb1, 0xb1, 0x7e, 0x56, 0xd2,
    0xcf, 0x22, 0xd7, 0xf3, 0x70, 0xb, 0x6d, 0xd1, 0x8c, 0xd1, 0x97, 0xab, 0xcf,
    0xd2, 0xcc, 0x6c, 0xf2, 0xb8, 0x1, 0x2d, 0x38, 0xee, 0xb6, 0xda, 0x1e, 0x50,
    0x47, 0x4e, 0x38, 0x49, 0x28, 0x19, 0x41, 0x97, 0xba, 0xac, 0xf8, 0x8b, 0x68,
    0xf4, 0xfd, 0x24, 0x30, 0xdc, 0x18, 0x38, 0xcc, 0xd5, 0x81, 0xf9, 0xbf, 0x22,
    0x61, 0x68, 0xff, 0xfa, 0xaf, 0x77, 0xd5, 0xfc, 0x49, 0xec, 0x6d, 0x66, 0x36,
    0x4a, 0xc2, 0x5c, 0xd5, 0x57, 0xd6, 0x81, 0xe9, 0x8c, 0x90, 0xab, 0xfd, 0xfc,
    0x1a, 0x2e, 0xe, 0xd, 0xbb, 0x53, 0xf0, 0x82, 0x54, 0xa2, 0x69, 0xc5, 0xf2,
    0xec, 0xa0, 0x31, 0xa7, 0x76, 0x21, 0x7d, 0xce, 0x3a, 0xca, 0x39, 0x1d, 0x12,
    0x88, 0x6e, 0x79, 0x99, 0xed, 0x70, 0x85, 0xa4, 0xf1, 0x42, 0x79, 0x63, 0x69,
    0x2c, 0x7a, 0xbb, 0x7f, 0x61, 0xc6, 0xf7, 0xda, 0x3e, 0x96, 0x78, 0x11, 0xca,
    0x87, 0x51, 0xf2, 0x59, 0x7f, 0x49, 0x9, 0xcb, 0x7d, 0x73, 0x65, 0xc2, 0x7,
    0x5f, 0x8b, 0x3f, 0x3a, 0xa0, 0xfa, 0xf2, 0x11, 0x1e, 0x9f, 0x1f, 0x7c, 0x9,
    0x57, 0x80, 0xcf, 0xa0, 0xa7, 0xc, 0x9a, 0x5, 0xec, 0x77, 0x1d, 0xce, 0x15,
    0xdf, 0x5, 0xea, 0xc3, 0x69, 0x73, 0xa2, 0x1a, 0x2c, 0xc8, 0x3b, 0x5e, 0x1a,
    0xc3, 0xbe, 0x27, 0x6c, 0xe8, 0x10, 0x9, 0xcf, 0xa1, 0xfc, 0xad, 0xf2, 0xea};

SCENARIO("test mercury_packet_processor_get_analysis_context_fdc for http request payload") {
    GIVEN("mercury packet processor") {
        libmerc_config config = create_config();
        mercury_context mc = initialize_mercury(config);
        mercury_packet_processor mpp = mercury_packet_processor_construct(mc);
        const analysis_context* ac = nullptr;
        
        const int max_buffer_allocation = 1500;
        uint8_t wbuffer_http[max_buffer_allocation];

        // http_request
        uint32_t src_ip = 318832897; // 19.1.1.1 -- reversed IP
        uint32_t dst_ip = 2511637346; // 149.180.139.98 -- reversed IP
        uint16_t src_port = 56533;
        uint16_t dst_port = 80;
        uint8_t proto = ip::protocol::tcp;

        struct flow_key_ext k_http;
        k_http.ip_vers = 4;
        k_http.src_port = src_port;
        k_http.dst_port = dst_port;
        k_http.addr.ipv4.src = src_ip;
        k_http.addr.ipv4.dst = dst_ip;
        k_http.protocol = proto;

        WHEN("write to FDC buffer for tcp payload of http request") {
            size_t fdc_buffer_len = max_buffer_allocation;
            int bytes_written = mercury_packet_processor_get_analysis_context_fdc(
                mpp, 
                &k_http, 
                http_tcp_payload, 
                sizeof(http_tcp_payload), 
                wbuffer_http, 
                &fdc_buffer_len, 
                &ac);

            THEN("FDC should be written to output buffer") {
                REQUIRE(bytes_written != fdc_return::FDC_WRITE_INSUFFICIENT_SPACE);
                REQUIRE(bytes_written == 129);
                REQUIRE(fdc_buffer_len == max_buffer_allocation);
            }  
            mercury_packet_processor_destruct(mpp);
        }
        mercury_finalize(mc);
    }
}

SCENARIO("test mercury_packet_processor_get_analysis_context_fdc with resources file as null and analysis turned on") {
    GIVEN("mercury packet processor") {
        libmerc_config config = create_config();
        config.resources = nullptr;
        config.do_analysis = true;

        mercury_context mc = initialize_mercury(config);
        mercury_packet_processor mpp = mercury_packet_processor_construct(mc);
        const analysis_context* ac = nullptr;

        const int max_buffer_allocation = 1500;
        uint8_t wbuffer_quic[max_buffer_allocation];

        uint32_t src_ip_quic = 16843009; // 1.1.1.1 -- IP -> reversed IP: 1.1.1.1 
        uint32_t dst_ip_quic = 33686018; // 2.2.2.2 -- IP -> reversed IP: 2.2.2.2
        uint16_t src_port_quic = 43822;
        uint16_t dst_port_quic = 443;
        uint8_t proto_quic = ip::protocol::udp;

        struct flow_key_ext k_quic;
        k_quic.src_port = src_port_quic;
        k_quic.dst_port = dst_port_quic;
        k_quic.addr.ipv4.src = src_ip_quic;
        k_quic.addr.ipv4.dst = dst_ip_quic;
        k_quic.protocol = proto_quic;
        k_quic.ip_vers = 4;

        WHEN("write to FDC buffer for tcp payload of quic init packet") {
            size_t fdc_buffer_len = max_buffer_allocation;
            int bytes_written = mercury_packet_processor_get_analysis_context_fdc(
                mpp, 
                &k_quic, 
                quic_init_payload, 
                sizeof(quic_init_payload), 
                wbuffer_quic, 
                &fdc_buffer_len, 
                &ac);
            THEN("FDC should be written to output buffer") {
                REQUIRE(bytes_written != fdc_return::FDC_WRITE_INSUFFICIENT_SPACE);
                REQUIRE(bytes_written == 176);
                REQUIRE(fdc_buffer_len == max_buffer_allocation);
                if(ac != nullptr) {
                    printf("ac->result.is_valid() = %d\n", ac->result.is_valid());
                    REQUIRE(ac->result.is_valid() == false);
                }
            }  
            mercury_packet_processor_destruct(mpp);
        }
        mercury_finalize(mc);
    }
}

SCENARIO("test mercury_packet_processor_get_analysis_context_fdc for http request payload & ipv6 flow key") {
    GIVEN("mercury packet processor") {
        libmerc_config config = create_config();
        mercury_context mc = initialize_mercury(config);
        mercury_packet_processor mpp = mercury_packet_processor_construct(mc);
        const analysis_context* ac = nullptr;
        
        const int max_buffer_allocation = 1500;
        uint8_t wbuffer_http[max_buffer_allocation];

        struct ipv6_addr_ext src;
        src.a = 0x20010db8;
        src.b = 0x20010db8;
        src.c = 0x20010db8;
        src.d = 0x20010db8;

        struct ipv6_addr_ext dst;
        dst.a = 0x85a30000;
        dst.b = 0x85a30000;
        dst.c = 0x85a30000;
        dst.d = 0x85a30000;

        uint16_t src_port = 56533;
        uint16_t dst_port = 80;
        uint8_t proto = ip::protocol::tcp;

        struct flow_key_ext k_ipv6;
        k_ipv6.src_port = src_port;
        k_ipv6.dst_port = dst_port;
        k_ipv6.ip_vers = 6;
        k_ipv6.protocol = proto;
        
        k_ipv6.addr.ipv6.src.a = src.a;
        k_ipv6.addr.ipv6.src.b = src.b;
        k_ipv6.addr.ipv6.src.c = src.c;
        k_ipv6.addr.ipv6.src.d = src.d;

        k_ipv6.addr.ipv6.dst.a = dst.a;
        k_ipv6.addr.ipv6.dst.b = dst.b;
        k_ipv6.addr.ipv6.dst.c = dst.c;
        k_ipv6.addr.ipv6.dst.d = dst.d;

        WHEN("write to FDC buffer for tcp payload of http request") {
            size_t fdc_buffer_len = max_buffer_allocation;
            int bytes_written = mercury_packet_processor_get_analysis_context_fdc(
                mpp, 
                &k_ipv6, 
                http_tcp_payload, 
                sizeof(http_tcp_payload), 
                wbuffer_http, 
                &fdc_buffer_len, 
                &ac);

            THEN("FDC should be written to output buffer") {
                REQUIRE(bytes_written != fdc_return::FDC_WRITE_INSUFFICIENT_SPACE);
                REQUIRE(bytes_written == 122);
                REQUIRE(fdc_buffer_len == max_buffer_allocation);
            }  
            mercury_packet_processor_destruct(mpp);
        }
        mercury_finalize(mc);
    }
}

SCENARIO("test mercury_packet_processor_get_analysis_context_fdc for tls client hello payload") {
    GIVEN("mercury packet processor") {
        libmerc_config config = create_config();
        mercury_context mc = initialize_mercury(config);
        mercury_packet_processor mpp = mercury_packet_processor_construct(mc);
        const analysis_context* ac = nullptr;
        
        const int max_buffer_allocation = 1500;
        uint8_t wbuffer_tls[max_buffer_allocation];

        uint32_t src_ip_tls = 2684463296; // 192.168.1.160 -- IP -> reversed IP: 160.1.168.192 
        uint32_t dst_ip_tls = 734393816; // 216.245.197.43 -- IP -> reversed IP: 43.197.245.216
        uint16_t src_port_tls = 49160;
        uint16_t dst_port_tls = 443;
        uint8_t proto_tls = ip::protocol::tcp;

        struct flow_key_ext k_tls;
        k_tls.src_port = src_port_tls;
        k_tls.dst_port = dst_port_tls;
        k_tls.addr.ipv4.src = src_ip_tls;
        k_tls.addr.ipv4.dst = dst_ip_tls;
        k_tls.protocol = proto_tls;
        k_tls.ip_vers = 4;

        WHEN("write to FDC buffer for tcp payload of tls client hello") {
            size_t fdc_buffer_len = max_buffer_allocation;
            int bytes_written = mercury_packet_processor_get_analysis_context_fdc(
                mpp, 
                &k_tls, 
                tls_client_hello_tcp_payload, 
                sizeof(tls_client_hello_tcp_payload), 
                wbuffer_tls, 
                &fdc_buffer_len, 
                &ac);

            THEN("FDC should be written to output buffer") {
                REQUIRE(bytes_written != fdc_return::FDC_WRITE_INSUFFICIENT_SPACE);
                REQUIRE(bytes_written == 159);
                REQUIRE(fdc_buffer_len == max_buffer_allocation);
            }  
            mercury_packet_processor_destruct(mpp);
        }
        mercury_finalize(mc);
    }
}

SCENARIO("test mercury_packet_processor_get_analysis_context_fdc for fragmented tls client hello payload without reassembly") {
    GIVEN("mercury packet processor") {
        libmerc_config config = create_config();
        mercury_context mc = initialize_mercury(config);
        mercury_packet_processor mpp = mercury_packet_processor_construct(mc);
        const analysis_context* ac = nullptr;
        
        const int max_buffer_allocation = 1500;
        uint8_t wbuffer_tls[max_buffer_allocation];

        uint32_t src_ip_tls = 2684463296; // 192.168.1.160 -- IP -> reversed IP: 160.1.168.192 
        uint32_t dst_ip_tls = 734393816; // 216.245.197.43 -- IP -> reversed IP: 43.197.245.216
        uint16_t src_port_tls = 49160;
        uint16_t dst_port_tls = 443;
        uint8_t proto_tls = ip::protocol::tcp;

        struct flow_key_ext k_tls;
        k_tls.src_port = src_port_tls;
        k_tls.dst_port = dst_port_tls;
        k_tls.addr.ipv4.src = src_ip_tls;
        k_tls.addr.ipv4.dst = dst_ip_tls;
        k_tls.protocol = proto_tls;
        k_tls.ip_vers = 4;

        WHEN("write to FDC buffer for 1st tcp payload of tls client hello") {
            size_t fdc_buffer_len = max_buffer_allocation;
            int bytes_written = mercury_packet_processor_get_analysis_context_fdc(
                mpp, 
                &k_tls, 
                tls_fragment_1, 
                sizeof(tls_fragment_1), 
                wbuffer_tls, 
                &fdc_buffer_len, 
                &ac);

            THEN("FDC should be written to output buffer") {
                REQUIRE(bytes_written != fdc_return::FDC_WRITE_INSUFFICIENT_SPACE);
                REQUIRE(bytes_written == 205);
                REQUIRE(fdc_buffer_len == max_buffer_allocation);
            }  
            mercury_packet_processor_destruct(mpp);
        }
        mercury_finalize(mc);
    }
}

SCENARIO("test mercury_packet_processor_get_analysis_context_fdc for fragmented tls client hello payload with reassembly and within number of packets limit") {
    GIVEN("mercury packet processor") {
        libmerc_config config = create_config();
        config.packet_filter_cfg = "tls.client_hello,quic,http;format=tls/1;reassembly;minimize-ram";
        mercury_context mc = initialize_mercury(config); 
        mercury_packet_processor mpp = mercury_packet_processor_construct(mc);
        const analysis_context* ac = nullptr;
        
        const int max_buffer_allocation = 1500;
        uint8_t wbuffer_tls[max_buffer_allocation];

        uint32_t src_ip_tls = 2684463296; // 192.168.1.160 -- IP -> reversed IP: 160.1.168.192 
        uint32_t dst_ip_tls = 734393816; // 216.245.197.43 -- IP -> reversed IP: 43.197.245.216
        uint16_t src_port_tls = 49160;
        uint16_t dst_port_tls = 443;
        uint8_t proto_tls = ip::protocol::tcp;

        struct flow_key_ext k_tls;
        k_tls.src_port = src_port_tls;
        k_tls.dst_port = dst_port_tls;
        k_tls.addr.ipv4.src = src_ip_tls;
        k_tls.addr.ipv4.dst = dst_ip_tls;
        k_tls.protocol = proto_tls;
        k_tls.ip_vers = 4;

        WHEN("write to FDC buffer for the 2 tcp segments of tls client hello") {
            size_t fdc_buffer_len = max_buffer_allocation;
            int bytes_written_1 = mercury_packet_processor_get_analysis_context_fdc(
                mpp, 
                &k_tls, 
                tls_fragment_1, 
                sizeof(tls_fragment_1), 
                wbuffer_tls, 
                &fdc_buffer_len, 
                &ac);
            int bytes_written_2 = mercury_packet_processor_get_analysis_context_fdc(
                mpp, 
                &k_tls, 
                tls_fragment_2, 
                sizeof(tls_fragment_2), 
                wbuffer_tls, 
                &fdc_buffer_len, 
                &ac);

            THEN("FDC should be written to output buffer") {
                REQUIRE(bytes_written_1 != fdc_return::FDC_WRITE_INSUFFICIENT_SPACE);
                REQUIRE(bytes_written_1 == fdc_return::MORE_PACKETS_NEEDED);
                REQUIRE(bytes_written_2 != fdc_return::FDC_WRITE_INSUFFICIENT_SPACE);
                REQUIRE(bytes_written_2 == 217);
                REQUIRE(fdc_buffer_len == max_buffer_allocation);
            }
        }

        mercury_packet_processor_destruct(mpp);
        mercury_finalize(mc);
    }
}

SCENARIO("test mercury_packet_processor_get_analysis_context_fdc for fragmented tls client hello payload with reassembly and exceeding number of packets limit") {
    GIVEN("mercury packet processor") {
        libmerc_config config = create_config();
        config.packet_filter_cfg = "tls.client_hello,quic,http;format=tls/1;reassembly;minimize-ram";
        mercury_context mc = initialize_mercury(config); 
        mercury_packet_processor mpp = mercury_packet_processor_construct(mc);
        const analysis_context* ac = nullptr;
        
        const int max_buffer_allocation = 1500;
        uint8_t wbuffer_tls[max_buffer_allocation];

        uint32_t src_ip_tls = 2684463296; // 192.168.1.160 -- IP -> reversed IP: 160.1.168.192 
        uint32_t dst_ip_tls = 734393816; // 216.245.197.43 -- IP -> reversed IP: 43.197.245.216
        uint16_t src_port_tls = 49160;
        uint16_t dst_port_tls = 443;
        uint8_t proto_tls = ip::protocol::tcp;

        struct flow_key_ext k_tls;
        k_tls.src_port = src_port_tls;
        k_tls.dst_port = dst_port_tls;
        k_tls.addr.ipv4.src = src_ip_tls;
        k_tls.addr.ipv4.dst = dst_ip_tls;
        k_tls.protocol = proto_tls;
        k_tls.ip_vers = 4;

        WHEN("write to FDC buffer for 1st tcp segment of tls client hello") {
            size_t fdc_buffer_len = max_buffer_allocation;
            int bytes_written_1 = mercury_packet_processor_get_analysis_context_fdc(
                mpp, 
                &k_tls, 
                tls_fragment_1, 
                sizeof(tls_fragment_1), 
                wbuffer_tls, 
                &fdc_buffer_len, 
                &ac);
            int bytes_written_2 = mercury_packet_processor_get_analysis_context_fdc(
                mpp, 
                &k_tls, 
                nullptr, 
                0, 
                wbuffer_tls, 
                &fdc_buffer_len, 
                &ac);

            THEN("FDC should be written to output buffer") {
                REQUIRE(bytes_written_1 != fdc_return::FDC_WRITE_INSUFFICIENT_SPACE);
                REQUIRE(bytes_written_1 == fdc_return::MORE_PACKETS_NEEDED);
                REQUIRE(bytes_written_2 != fdc_return::FDC_WRITE_INSUFFICIENT_SPACE);
                REQUIRE(bytes_written_2 == 205);
                REQUIRE(fdc_buffer_len == max_buffer_allocation);
            }
        }

        mercury_packet_processor_destruct(mpp);
        mercury_finalize(mc);
    }
}

SCENARIO("test mercury_packet_processor_get_analysis_context_fdc for quic init payload") {
    GIVEN("mercury packet processor") {
        libmerc_config config = create_config();
        mercury_context mc = initialize_mercury(config);
        mercury_packet_processor mpp = mercury_packet_processor_construct(mc);
        const analysis_context* ac = nullptr;
        
        const int max_buffer_allocation = 1500;
        uint8_t wbuffer_quic[max_buffer_allocation];

        uint32_t src_ip_quic = 16843009; // 1.1.1.1 -- IP -> reversed IP: 1.1.1.1 
        uint32_t dst_ip_quic = 33686018; // 2.2.2.2 -- IP -> reversed IP: 2.2.2.2
        uint16_t src_port_quic = 43822;
        uint16_t dst_port_quic = 443;
        uint8_t proto_quic = ip::protocol::udp;

        struct flow_key_ext k_quic;
        k_quic.src_port = src_port_quic;
        k_quic.dst_port = dst_port_quic;
        k_quic.addr.ipv4.src = src_ip_quic;
        k_quic.addr.ipv4.dst = dst_ip_quic;
        k_quic.protocol = proto_quic;
        k_quic.ip_vers = 4;

        WHEN("write to FDC buffer for tcp payload of quic init packet") {
            size_t fdc_buffer_len = max_buffer_allocation;
            int bytes_written = mercury_packet_processor_get_analysis_context_fdc(
                mpp, 
                &k_quic, 
                quic_init_payload, 
                sizeof(quic_init_payload), 
                wbuffer_quic, 
                &fdc_buffer_len, 
                &ac);

            THEN("FDC should be written to output buffer") {
                REQUIRE(bytes_written != fdc_return::FDC_WRITE_INSUFFICIENT_SPACE);
                REQUIRE(bytes_written == 176);
                REQUIRE(fdc_buffer_len == max_buffer_allocation);
            }  
            mercury_packet_processor_destruct(mpp);
        }
        mercury_finalize(mc);
    }
}

SCENARIO("test mercury_packet_processor_get_analysis_context_fdc for fragmented QUIC payload without reassembly") {
    GIVEN("mercury packet processor") {
        libmerc_config config = create_config();
        mercury_context mc = initialize_mercury(config);
        mercury_packet_processor mpp = mercury_packet_processor_construct(mc);
        const analysis_context* ac = nullptr;
        
        const int max_buffer_allocation = 1500;
        uint8_t wbuffer_quic[max_buffer_allocation];

        uint32_t src_ip_quic = 16843009; // 1.1.1.1 -- IP -> reversed IP: 1.1.1.1 
        uint32_t dst_ip_quic = 33686018; // 2.2.2.2 -- IP -> reversed IP: 2.2.2.2
        uint16_t src_port_quic = 43822;
        uint16_t dst_port_quic = 443;
        uint8_t proto_quic = ip::protocol::udp;

        struct flow_key_ext k_quic;
        k_quic.src_port = src_port_quic;
        k_quic.dst_port = dst_port_quic;
        k_quic.addr.ipv4.src = src_ip_quic;
        k_quic.addr.ipv4.dst = dst_ip_quic;
        k_quic.protocol = proto_quic;
        k_quic.ip_vers = 4;

        WHEN("write to FDC buffer for 1st QUIC payload") {
            size_t fdc_buffer_len = max_buffer_allocation;
            int bytes_written = mercury_packet_processor_get_analysis_context_fdc(
                mpp, 
                &k_quic, 
                quic_fragment_1, 
                sizeof(quic_fragment_1), 
                wbuffer_quic, 
                &fdc_buffer_len, 
                &ac);

            THEN("FDC should be written to output buffer") {
                REQUIRE(bytes_written != fdc_return::FDC_WRITE_INSUFFICIENT_SPACE);
                REQUIRE(bytes_written == 46);
                REQUIRE(fdc_buffer_len == max_buffer_allocation);
            }  
            mercury_packet_processor_destruct(mpp);
        }
        mercury_finalize(mc);
    }
}

SCENARIO("test mercury_packet_processor_get_analysis_context_fdc for fragmented QUIC payload with reassembly and within number of packets limit") {
    GIVEN("mercury packet processor") {
        libmerc_config config = create_config();
        config.packet_filter_cfg = "tls.client_hello,quic,http;format=tls/1;reassembly;minimize-ram";
        mercury_context mc = initialize_mercury(config); 
        mercury_packet_processor mpp = mercury_packet_processor_construct(mc);
        const analysis_context* ac = nullptr;
        
        const int max_buffer_allocation = 1500;
        uint8_t wbuffer_quic[max_buffer_allocation];

        uint32_t src_ip_quic = 16843009; // 1.1.1.1 -- IP -> reversed IP: 1.1.1.1 
        uint32_t dst_ip_quic = 33686018; // 2.2.2.2 -- IP -> reversed IP: 2.2.2.2
        uint16_t src_port_quic = 43822;
        uint16_t dst_port_quic = 443;
        uint8_t proto_quic = ip::protocol::udp;

        struct flow_key_ext k_quic;
        k_quic.src_port = src_port_quic;
        k_quic.dst_port = dst_port_quic;
        k_quic.addr.ipv4.src = src_ip_quic;
        k_quic.addr.ipv4.dst = dst_ip_quic;
        k_quic.protocol = proto_quic;
        k_quic.ip_vers = 4;

        WHEN("write to FDC buffer for the 2 QUIC segments") {
            size_t fdc_buffer_len = max_buffer_allocation;
            int bytes_written_1 = mercury_packet_processor_get_analysis_context_fdc(
                mpp, 
                &k_quic, 
                quic_fragment_1, 
                sizeof(quic_fragment_1), 
                wbuffer_quic, 
                &fdc_buffer_len, 
                &ac);
            int bytes_written_2 = mercury_packet_processor_get_analysis_context_fdc(
                mpp, 
                &k_quic, 
                quic_fragment_2, 
                sizeof(quic_fragment_2), 
                wbuffer_quic, 
                &fdc_buffer_len, 
                &ac);

            THEN("FDC should be written to output buffer") {
                REQUIRE(bytes_written_1 != fdc_return::FDC_WRITE_INSUFFICIENT_SPACE);
                REQUIRE(bytes_written_1 == fdc_return::MORE_PACKETS_NEEDED);
                REQUIRE(bytes_written_2 != fdc_return::FDC_WRITE_INSUFFICIENT_SPACE);
                REQUIRE(bytes_written_2 == 192);
                REQUIRE(fdc_buffer_len == max_buffer_allocation);
            }
        }

        mercury_packet_processor_destruct(mpp);
        mercury_finalize(mc);
    }
}

SCENARIO("test mercury_packet_processor_get_analysis_context_fdc for fragmented QUIC payload with reassembly and exceeding number of packets limit") {
    GIVEN("mercury packet processor") {
        libmerc_config config = create_config();
        config.packet_filter_cfg = "tls.client_hello,quic,http;format=tls/1;reassembly;minimize-ram";
        mercury_context mc = initialize_mercury(config); 
        mercury_packet_processor mpp = mercury_packet_processor_construct(mc);
        const analysis_context* ac = nullptr;
        
        const int max_buffer_allocation = 1500;
        uint8_t wbuffer_quic[max_buffer_allocation];

        uint32_t src_ip_quic = 16843009; // 1.1.1.1 -- IP -> reversed IP: 1.1.1.1 
        uint32_t dst_ip_quic = 33686018; // 2.2.2.2 -- IP -> reversed IP: 2.2.2.2
        uint16_t src_port_quic = 43822;
        uint16_t dst_port_quic = 443;
        uint8_t proto_quic = ip::protocol::udp;

        struct flow_key_ext k_quic;
        k_quic.src_port = src_port_quic;
        k_quic.dst_port = dst_port_quic;
        k_quic.addr.ipv4.src = src_ip_quic;
        k_quic.addr.ipv4.dst = dst_ip_quic;
        k_quic.protocol = proto_quic;
        k_quic.ip_vers = 4;

        WHEN("Skip writing to FDC buffer for the 1st QUIC payload") {
            size_t fdc_buffer_len = max_buffer_allocation;
            int bytes_written_1 = mercury_packet_processor_get_analysis_context_fdc(
                mpp, 
                &k_quic, 
                quic_fragment_1, 
                sizeof(quic_fragment_1), 
                wbuffer_quic, 
                &fdc_buffer_len, 
                &ac);
            int bytes_written_2 = mercury_packet_processor_get_analysis_context_fdc(
                mpp, 
                &k_quic, 
                nullptr, 
                0, 
                wbuffer_quic, 
                &fdc_buffer_len, 
                &ac);

            THEN("FDC should be written to output buffer") {
                REQUIRE(bytes_written_1 != fdc_return::FDC_WRITE_INSUFFICIENT_SPACE);
                REQUIRE(bytes_written_1 == fdc_return::MORE_PACKETS_NEEDED);
                REQUIRE(bytes_written_2 != fdc_return::FDC_WRITE_INSUFFICIENT_SPACE);
                REQUIRE(bytes_written_2 == 205);
                REQUIRE(fdc_buffer_len == max_buffer_allocation);
            }
        }

        mercury_packet_processor_destruct(mpp);
        mercury_finalize(mc);
    }
}

SCENARIO("test mercury_packet_processor_get_analysis_context_fdc for tls client hello payload with insufficient output buffer size") {
    GIVEN("mercury packet processor") {
        libmerc_config config = create_config();
        mercury_context mc = initialize_mercury(config);
        mercury_packet_processor mpp = mercury_packet_processor_construct(mc);
        const analysis_context* ac = nullptr;
        
        const int max_buffer_allocation = 150;
        uint8_t wbuffer_tls[max_buffer_allocation];

        uint32_t src_ip_tls = 2684463296; // 192.168.1.160 -- IP -> reversed IP: 160.1.168.192 
        uint32_t dst_ip_tls = 734393816; // 216.245.197.43 -- IP -> reversed IP: 43.197.245.216
        uint16_t src_port_tls = 49160;
        uint16_t dst_port_tls = 443;
        uint8_t proto_tls = ip::protocol::tcp;

        struct flow_key_ext k_tls;
        k_tls.src_port = src_port_tls;
        k_tls.dst_port = dst_port_tls;
        k_tls.addr.ipv4.src = src_ip_tls;
        k_tls.addr.ipv4.dst = dst_ip_tls;
        k_tls.protocol = proto_tls;
        k_tls.ip_vers = 4;

        WHEN("write to FDC buffer for tcp payload of tls client hello") {
            size_t fdc_buffer_len = max_buffer_allocation;
            int bytes_written = mercury_packet_processor_get_analysis_context_fdc(
                mpp, 
                &k_tls, 
                tls_client_hello_tcp_payload, 
                sizeof(tls_client_hello_tcp_payload), 
                wbuffer_tls, 
                &fdc_buffer_len, 
                &ac);

            THEN("FDC write to output buffer fails due to insufficient buffer size") {
                REQUIRE(bytes_written == fdc_return::FDC_WRITE_INSUFFICIENT_SPACE);
                REQUIRE(fdc_buffer_len == 2*max_buffer_allocation);
            }  
            mercury_packet_processor_destruct(mpp);
        }
        mercury_finalize(mc);
    }
}
