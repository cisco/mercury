#make file for testing and evaluate coverage for libmerc with libmerc_driver

include ../Makefile_helper.mk

ifeq ($(use_fsanitize),yes)
FSANITIZE = -fsanitize=address
LDFLAGS += -fsanitize=address
endif

ifeq ($(openssl_newer),yes)
CFLAGS += -DSSLNEW
endif

ifeq ($(is_macos_arm),yes)
CFLAGS += -I/opt/homebrew/include
CXXFLAGS += -I/opt/homebrew/include
LDFLAGS += -L/opt/homebrew/lib
endif

ifeq ($(COVERAGE_ENABLED),1)
CFLAGS += -fprofile-arcs --coverage -ggdb -O0
LDFLAGS += --coverage
endif

CFLAGS += -UNDEBUG
CFLAGS += -march=native -I../src/libmerc/xsimd/include
export LD_LIBRARY_PATH =../src/libmerc

LIBMERC_FOLDER = ../src/libmerc/
LIBMERC_DEBUG_FOLDER = ./debug-libs/
LIBMERC_SO = $(LIBMERC_FOLDER)libmerc.so
LIBMERC_SO_tls = $(LIBMERC_DEBUG_FOLDER)libmerc_tls.so
LIBMERC_SO_multiprotocol = $(LIBMERC_DEBUG_FOLDER)libmerc_multiprotocol.so
LIBMERC_SO_fdc = $(LIBMERC_DEBUG_FOLDER)libmerc_fdc.so
UNIT_TESTS = catch2main.cc
UNIT_TESTS += libmerc_driver_helper.cc
UNIT_TESTS += libmerc_fixture.cc

UNIT_TESTS_H = catch.hpp
UNIT_TESTS_H += libmerc_driver_helper.hpp
UNIT_TESTS_H += libmerc_api.hpp
UNIT_TESTS_H += libmerc_fixture.h

UNIT_TESTS_TLS_ONLY = $(UNIT_TESTS)
UNIT_TESTS_TLS_ONLY += general_info_test.cc
UNIT_TESTS_TLS_ONLY += libmerc_flow_test.cc
UNIT_TESTS_TLS_ONLY += libmerc_tlsdb_test.cc
UNIT_TESTS_TLS_ONLY += libmerc_driver.cc

UNIT_TESTS_TLS_HTTP_QUIC = $(UNIT_TESTS)
UNIT_TESTS_TLS_HTTP_QUIC += libmerc_dbmultiprotocol_test.cc
UNIT_TESTS_TLS_HTTP_QUIC += performance_test.cc
UNIT_TESTS_TLS_HTTP_QUIC += functional_unit_test.cc

UNIT_TESTS_FDC = $(UNIT_TESTS)
UNIT_TESTS_FDC += libmerc_driver_fdc.cc

# implicit rules for building object files from .cc files
%.o: %.cc
	$(CXX) $(CFLAGS) -c $<

# target to build all executables
#
all: libmerc_driver_tls_only libmerc_driver_multiprotocol libmerc_driver_fdc

libmerc_driver_tls_only: debug-libmerc-tls $(UNIT_TESTS_TLS_ONLY) Makefile.in $(UNIT_TESTS_H)
	@echo "creating copy of libmerc.so for testing purposes"
	cp $(LIBMERC_SO) $(LIBMERC_SO).alt
	cp $(LIBMERC_SO) $(LIBMERC_SO_tls)
	mv $(LIBMERC_SO) $(LIBMERC_SO_tls).alt
	$(CXX) $(CFLAGS) -I ../src/ -I../src/libmerc $(UNIT_TESTS_TLS_ONLY) -pthread -o libmerc_driver_tls_only -DLIBMERC_SO_PATH="\"$(LIBMERC_SO_tls)\"" $(FSANITIZE) $(LDFLAGS) -L$(LIBMERC_DEBUG_FOLDER) $(LIBMERC_SO_tls) -lcrypto -ldl -lz

libmerc_driver_multiprotocol: debug-libmerc $(UNIT_TESTS_TLS_HTTP_QUIC) Makefile.in $(UNIT_TESTS_H)
	@echo "creating copy of libmerc.so for testing purposes"
	cp $(LIBMERC_SO) $(LIBMERC_SO).alt
	cp $(LIBMERC_SO) $(LIBMERC_SO_multiprotocol)
	mv $(LIBMERC_SO) $(LIBMERC_SO_multiprotocol).alt
	$(CXX) $(CFLAGS) -I ../src/ -I../src/libmerc $(UNIT_TESTS_TLS_HTTP_QUIC) -pthread -o libmerc_driver_multiprotocol -DLIBMERC_SO_PATH="\"$(LIBMERC_SO_multiprotocol)\"" $(FSANITIZE) $(LDFLAGS) -L$(LIBMERC_DEBUG_FOLDER) $(LIBMERC_SO_multiprotocol) -lcrypto -ldl -lz

libmerc_driver_fdc: debug-libmerc-fdc $(UNIT_TESTS_TLS_FDC) Makefile.in $(UNIT_TESTS_H)
	@echo "creating copy of libmerc.so for testing purposes"
	cp $(LIBMERC_SO) $(LIBMERC_SO).alt
	cp $(LIBMERC_SO) $(LIBMERC_SO_fdc)
	mv $(LIBMERC_SO) $(LIBMERC_SO_fdc).alt
	$(CXX) $(CFLAGS) -I ../src/ -I../src/libmerc $(UNIT_TESTS_FDC) -pthread -o libmerc_driver_fdc -DLIBMERC_SO_PATH="\"$(LIBMERC_SO_fdc)\"" $(FSANITIZE) $(LDFLAGS) -L$(LIBMERC_DEBUG_FOLDER) $(LIBMERC_SO_fdc) -lcrypto -ldl -lz

libmerc_driver_coverage: libmerc_driver_multiprotocol_coverage libmerc_driver_tls_coverage

libmerc_driver_tls_coverage: debug-libmerc_tls_gcov $(UNIT_TESTS_TLS_ONLY) Makefile.in $(UNIT_TESTS_H)
	@echo "creating copy of libmerc.so for testing purposes"
	cp $(LIBMERC_SO) $(LIBMERC_SO).alt
	cp $(LIBMERC_SO) $(LIBMERC_SO_tls)
	mv $(LIBMERC_SO) $(LIBMERC_SO_tls).alt
	$(CXX) $(CFLAGS) -I ../src/ -I../src/libmerc $(UNIT_TESTS_TLS_ONLY) -pthread -o libmerc_driver_tls_only -DLIBMERC_SO_PATH="\"$(LIBMERC_SO_tls)\"" $(FSANITIZE) $(LDFLAGS) -L$(LIBMERC_DEBUG_FOLDER) $(LIBMERC_SO_tls) -lcrypto -ldl -lz --coverage

libmerc_driver_multiprotocol_coverage: debug-libmerc_gcov $(UNIT_TESTS_TLS_HTTP_QUIC) Makefile.in $(UNIT_TESTS_H)
	@echo "creating copy of libmerc.so for testing purposes"
	cp $(LIBMERC_SO) $(LIBMERC_SO).alt
	cp $(LIBMERC_SO) $(LIBMERC_SO_multiprotocol)
	mv $(LIBMERC_SO) $(LIBMERC_SO_multiprotocol).alt
	$(CXX) $(CFLAGS) -I ../src/ -I../src/libmerc $(UNIT_TESTS_TLS_HTTP_QUIC) -pthread -o libmerc_driver_multiprotocol -DLIBMERC_SO_PATH="\"$(LIBMERC_SO_multiprotocol)\"" $(FSANITIZE) $(LDFLAGS) -L$(LIBMERC_DEBUG_FOLDER) $(LIBMERC_SO_multiprotocol) -lcrypto -ldl -lz --coverage

pdu_verifier: debug-libmerc pdu_verifier.cc
	$(CXX) $(CFLAGS) -I ../src/ -I ../src/libmerc pdu_verifier.cc $(FSANITIZE) -L./libmerc $(LDFLAGS) $(LIBMERC_SO) -lcrypto -ldl -lz -o pdu_verifier

.PHONY: debug-libmerc_tls_gcov
debug-libmerc_tls_gcov:
	mkdir -p $(LIBMERC_DEBUG_FOLDER)
	cd ../src && $(MAKE) OPTFLAGS=-DSTATIC_CFG_SELECT='\"tls\"' debug-libmerc_gcov

.PHONY: debug-libmerc_gcov
debug-libmerc_gcov:
	mkdir -p $(LIBMERC_DEBUG_FOLDER)
	cd ../src && $(MAKE) debug-libmerc_gcov

.PHONY: debug-libmerc
debug-libmerc:
	mkdir -p $(LIBMERC_DEBUG_FOLDER)
	cd ../src && $(MAKE) COVERAGE_ENABLED=$(COVERAGE_ENABLED) debug-libmerc

.PHONY: debug-libmerc-tls
debug-libmerc-tls:
	mkdir -p $(LIBMERC_DEBUG_FOLDER)
	cd ../src && $(MAKE) OPTFLAGS=-DSTATIC_CFG_SELECT='\"tls\"' COVERAGE_ENABLED=$(COVERAGE_ENABLED) debug-libmerc

.PHONY: debug-libmerc-fdc
debug-libmerc-fdc:
	mkdir -p $(LIBMERC_DEBUG_FOLDER)
	cd ../src && $(MAKE) debug-libmerc

.PHONY: perfect-hash-test
perfect-hash-test:
	$(CXX) $(CFLAGS) -I ../src/libmerc ph_driver.cc -o ph_driver
	./ph_driver | grep -e 'Unordered Map lookup' -e 'Perfect Hash generation table' -e 'Perfect Hash lookup' -e 'failed' -e 'Perfect Hash.' -e 'Unordered Map.'


# FIXME: the next tests suppress ASAN container overflow detection.  This is
# necessary because some parts of the code are compiled with ASAN and other
# parts are not.  The ideal behavior would be to go back and compile
# everything with ASAN, instead of pulling in already-compiled .o files.
# https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow

.PHONY: run_libmerc_tls_only_tests
run_libmerc_tls_only_tests: xtra/resources/resources-mp.tgz
	cd ../unit_tests/debug-libs/ && (rm -f libmerc.so.0) && (ln -s libmerc_tls.so libmerc.so.0)
	export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(LIBMERC_DEBUG_FOLDER) && ./libmerc_driver_tls_only -s

.PHONY: run_libmerc_multiprotocol_tests
run_libmerc_multiprotocol_tests: xtra/resources/resources-mp.tgz
	cd ../unit_tests/debug-libs/ && rm -f libmerc.so.0 && ln -s libmerc_multiprotocol.so libmerc.so.0
	export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(LIBMERC_DEBUG_FOLDER) && ./libmerc_driver_multiprotocol -s

.PHONY: run
run: xtra/resources/resources-mp.tgz # xtra data needed for unit tests
ifeq ($(is_macos_arm),yes)
	cd ../unit_tests/debug-libs/ && (rm -f libmerc.so.0) && (ln -s libmerc_tls.so libmerc.so.0)
	export DYLD_LIBRARY_PATH=$$DYLD_LIBRARY_PATH:$(LIBMERC_DEBUG_FOLDER):. && ASAN_OPTIONS=detect_container_overflow=0 ./libmerc_driver_tls_only -s
	cd ../unit_tests/debug-libs/ && rm -f libmerc.so.0 && ln -s libmerc_multiprotocol.so libmerc.so.0
	export DYLD_LIBRARY_PATH=$$DYLD_LIBRARY_PATH:$(LIBMERC_DEBUG_FOLDER):. && ASAN_OPTIONS=detect_container_overflow=0 ./libmerc_driver_multiprotocol -s
	cd ../unit_tests/debug-libs/ && (rm -f libmerc.so.0) && (ln -s libmerc_fdc.so libmerc.so.0)
	export DYLD_LIBRARY_PATH=$$DYLD_LIBRARY_PATH:$(LIBMERC_DEBUG_FOLDER) && ASAN_OPTIONS=detect_container_overflow=0 ./libmerc_driver_fdc -s
else
	cd ../unit_tests/debug-libs/ && (rm -f libmerc.so.0) && (ln -s libmerc_tls.so libmerc.so.0)
	export LD_LIBRARY_PATH=$$LD_LIBRARY_PATH:$(LIBMERC_DEBUG_FOLDER):. && ASAN_OPTIONS=detect_container_overflow=0 ./libmerc_driver_tls_only -s
	cd ../unit_tests/debug-libs/ && rm -f libmerc.so.0 && ln -s libmerc_multiprotocol.so libmerc.so.0
	export LD_LIBRARY_PATH=$$LD_LIBRARY_PATH:$(LIBMERC_DEBUG_FOLDER) && ASAN_OPTIONS=detect_container_overflow=0 ./libmerc_driver_multiprotocol -s
	cd ../unit_tests/debug-libs/ && (rm -f libmerc.so.0) && (ln -s libmerc_fdc.so libmerc.so.0)
	export LD_LIBRARY_PATH=$$LD_LIBRARY_PATH:$(LIBMERC_DEBUG_FOLDER) && ASAN_OPTIONS=detect_container_overflow=0 ./libmerc_driver_fdc -s
endif

.PHONY: clean
clean:
	rm -rf libmerc_driver_multiprotocol
	rm -rf libmerc_driver_tls_only
	rm -rf libmerc_driver_fdc
	rm -rf pdu_verifier
	rm -rf *.json.gz
	rm -rf $(LIBMERC_DEBUG_FOLDER)
	find . -type f -name "*.gcno" -delete
	find . -type f -name "*.gcda" -delete
	find . -type f -name "*.gcov" -delete
	cd ../src; $(MAKE) clean

# EOF
