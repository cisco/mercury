# makefile for mercury fast fingerprint / packet metadata capture program
#


SHELL = /bin/sh

srcdir = .

INSTALL = /usr/bin/install -c
INSTALLDATA = /usr/bin/install -c -m 644

prefix = @prefix@
exec_prefix=@exec_prefix@
bindir = @bindir@
libdir = @libdir@
localstatedir = @localstatedir@/mercury
datarootdir = @datarootdir@/mercury
interceptdir = @datarootdir@/intercept

.SUFFIXES:
.SUFFIXES: .c .o

LIBMERC = libmerc.a
LIBMERC_SO = libmerc/libmerc.so

# set parameters from configure (autoconf)
#
python      = @PY@
have_py3    = @PYTHON3@
have_pip3   = @PIP3@
have_tpkt3  = @HAVE_TPACKET_V3@
CDEFS       = $(filter -DHAVE_PYTHON3=1 -DHAVE_X86INTRIN_H=1 -DHAVE_GETTID=1, @DEFS@) -DDEFAULT_RESOURCE_DIR="\"$(datarootdir)\""

include ../Makefile_helper.mk

# MERC and MERC_H hold the core source and header files, respectively
#
# MERC   =  mercury.c
ifeq ($(have_tpkt3),yes)
MERC   += af_packet_v3.c
else
MERC   += capture.c
endif
MERC   += config.c
MERC   += json_file_io.c
MERC   += output.c
MERCC  += pkt_processing.cc
MERC   += pcap_file_io.c
MERC   += pcap_reader.c
MERC   += rnd_pkt_drop.c
MERC   += signal_handling.c

MERC_H =  mercury.h
MERC_H += af_packet_v3.h
MERC_H += config.h
MERC_H += control.h
MERC_H += json_file_io.h
MERC_H += llq.h
MERC_H += output.h
MERC_H += pkt_processing.h
MERC_H += pcap_file_io.h
MERC_H += pcap_reader.h
MERC_H += rnd_pkt_drop.h
MERC_H += rotator.h
MERC_H += signal_handling.h

MERC_OBJ = $(MERCC:%.cc=%.o) $(MERC:%.c=%.o)

ifeq ($(have_py3),yes)
# PYANALYSIS = python_interface.c
# CDEFS     += -Wl,--no-as-needed -ldl -lutil $(shell pkg-config --libs --cflags python3)
# CYTARGETS  = python-inference/tls_fingerprint_min.cpp python-inference/tls_fingerprint_min.h python-inference/tls_fingerprint_min_api.h
# CYPREREQ   = python-inference/tls_fingerprint_min.pyx
else
PYANALYSIS =
CYTARGETS  =
CYPREREQ   =
endif

CAP        = cap_net_raw,cap_net_admin,cap_dac_override+eip
EUID       = $(id -u)

CFLAGS += -I./libmerc/xsimd/include
ifeq ($(openssl_newer),yes)
CFLAGS += -DSSLNEW
endif

ifeq ($(is_macos_arm),yes)
CFLAGS += -I/opt/homebrew/include
CXXFLAGS += -I/opt/homebrew/include
LDFLAGS += -L/opt/homebrew/lib
endif

# Uncomment to try to apply address sanitization everywhere (do not use in production)
#ifeq ($(use_fsanitize),yes)
#CFLAGS += -fsanitize=address
#LDFLAGS += -fsanitize=address
#endif

all: compiler_version mercury libmerc_test cert_analyze libmerc_util intercept_server # tls_scanner batch_gcd

# the version target just reports the c++ compiler version; we report
# this so that it is present in e.g. Jenkins logs
#
.PHONY: compiler_version
compiler_version:
	$(CXX) --version

# the target libmerc-and-mercury checks to see if libmerc.a needs to
# be rebuilt, rebuilds it if needed, and then builds mercury.
#
#.PHONY: libmerc-and-mercury
#libmerc-and-mercury: libmerc.a mercury # TODO: delete

# implicit rules for building object files from .c, .cpp, and .cc files
#
%.o: %.c
	$(CXX) $(CFLAGS) -c $<
%.o: %.cc
	$(CXX) $(CFLAGS) -c $<
%.o: %.cpp
	$(CXX) $(CFLAGS) -c $<

# the target mercury rebuilds mercury, and is dependent on the actual
# libmerc.a file, but it does not trigger any check to see if
# libmerc.a itself needs to be rebuild
#
mercury: mercury.c $(MERC_OBJ) $(MERC_H) libmerc.a Makefile.in
	$(CXX) $(CFLAGS) mercury.c $(MERC_OBJ) -pthread libmerc/libmerc.a  $(LDFLAGS) -lz -lcrypto -o mercury
	@echo $(COLOR_GREEN) "Build complete; now run 'sudo setcap" $(CAP) "mercury'" $(COLOR_OFF)

ifeq ($(use_fsanitize),yes)
FSANITIZE = -fsanitize=address -static-libasan
endif
debug-mercury: CFLAGS += -DDEBUG -g -O0
debug-mercury: CFLAGS += $(FSANITIZE)
debug-mercury: debug-libmerc.a mercury

setcap: mercury
	sudo setcap $(CAP) $<

libmerc.a:
	$(MAKE) -j --directory=libmerc libmerc.a

libmerc/libmerc.so:
	$(MAKE) -j --directory=libmerc libmerc.so

.PHONY: libmerc
libmerc:
	$(MAKE) --directory=libmerc clean
	$(MAKE) --directory=libmerc
	$(MAKE) --directory=libmerc libmerc.a

.PHONY: debug-libmerc.a
debug-libmerc.a:
	$(MAKE) --directory=libmerc clean
	$(MAKE) -j --directory=libmerc debug-libmerc.a

.PHONY: debug-libmerc_gcov
debug-libmerc_gcov:
	$(MAKE) --directory=libmerc clean
	$(MAKE) -j --directory=libmerc debug-libmerc_gcov.so

.PHONY: debug-libmerc
debug-libmerc:
	$(MAKE) --directory=libmerc clean
	$(MAKE) -j --directory=libmerc debug-libmerc.so

.PHONY: unstripped-libmerc
unstripped-libmerc:
	$(MAKE) --directory=libmerc clean
	$(MAKE) -j --directory=libmerc unstripped-libmerc.so unstripped-libmerc.a

.PHONY: stripped-libmerc
stripped-libmerc:
	$(MAKE) -j --directory=libmerc stripped-libmerc.so

ifeq ($(use_fsanitize),yes)
libmerc_util: CFLAGS += -fsanitize=address
endif
libmerc_util: libmerc_util.cc libmerc_api.h
	$(CXX) $(CFLAGS) libmerc_util.cc pcap_file_io.c -pthread -ldl -std=c++17 -o libmerc_util

intercept_server: intercept_server.cc
	$(CXX) $(CFLAGS) intercept_server.cc -std=c++17 -o intercept_server

tls_scanner: tls_scanner.cc libmerc.a libmerc/crypto_hash.hpp libmerc/verbosity.hpp libmerc/tls_connection.hpp
	$(CXX) $(CFLAGS) tls_scanner.cc libmerc/libmerc.a -pthread -lssl -lcrypto -lz -o tls_scanner

batch_gcd: CFLAGS += -march=native -flto=auto
batch_gcd: batch_gcd.cc
	$(CXX) $(CFLAGS) batch_gcd.cc libmerc/asn1.cc libmerc/asn1/oid.cc -lgmpxx -lgmp -pthread -o batch_gcd

cert_analyze: cert_analyze.cc libmerc/asn1.h
	$(CXX) $(CFLAGS) cert_analyze.cc libmerc/asn1.cc libmerc/asn1/oid.cc -pthread $(LDFLAGS) -lcrypto -o cert_analyze

cms: cms.cpp libmerc/asn1.h
	$(CXX) $(CFLAGS) cms.cpp libmerc/asn1.cc libmerc/asn1/oid.cc $(LDFLAGS) -lcrypto -o cms

dns-trie: dns-trie.cpp dns_trie.hpp fpdb_reader.hpp
	$(CXX) $(CFLAGS) dns-trie.cpp -o dns-trie

unit_test: unit_test.cpp
	$(CXX) $(CFLAGS) -UNDEBUG unit_test.cpp -o unit_test

os_identifier: os_identifier.cc os-identification/os_identifier.h
	$(CXX) $(CFLAGS) -I libmerc/ os_identifier.cc -lz -o os_identifier

archive_reader: archive_reader.cc libmerc/archive.h
	$(CXX) $(CFLAGS) archive_reader.cc -lz -lcrypto -o archive_reader

string: string.cc stringalgs.h options.h
	$(CXX) $(CFLAGS) string.cc -o string

cbor: cbor.cpp libmerc/cbor.hpp libmerc/fdc.hpp libmerc/static_dict.hpp libmerc/file_datum.hpp options.h
	$(CXX) $(CFLAGS) cbor.cpp -o cbor

decode: decode.cc
	$(CXX) $(CFLAGS) decode.cc -o decode

pcap: pcap.cc pcap_file_io.h
	$(CXX) $(CFLAGS) pcap.cc -o pcap

remap: remap.cpp libmerc/tls.cc libmerc/http.cc libmerc/match.cc libmerc/asn1.cc libmerc/asn1/oid.cc libmerc/addr.cc
	$(CXX) $(CFLAGS) -std=c++20 remap.cpp libmerc/tls.cc libmerc/http.cc libmerc/match.cc libmerc/asn1.cc libmerc/asn1/oid.cc libmerc/addr.cc -lcrypto -o remap

pcap_filter: pcap_filter.cc pcap_file_io.c libmerc
	$(CXX) $(CFLAGS) pcap_filter.cc pcap_file_io.c libmerc/libmerc.a -lz -lcrypto -pthread -o pcap_filter

classify: classify.cpp libmerc/analysis.cc libmerc/utils.cc libmerc/addr.cc
	$(CXX) $(CFLAGS) classify.cpp libmerc/analysis.cc libmerc/utils.cc libmerc/addr.cc -lcrypto -lz -o classify

# implicit rule for building object files
#
%.o: %.c %.h
#	$(CXX) $(CFLAGS) $(shell pkg-config --libs --cflags python3) -c $<
	$(CXX) $(CFLAGS) -c $<

# implicit rule for building object files from .cc files
#
%.o: %.cc %.h
#	$(CXX) $(CFLAGS) $(shell pkg-config --libs --cflags python3) -c $<
	$(CXX) $(CFLAGS) -c $<

# rule to build the cython/python analysis engine in python-inference
#
$(CYTARGETS): $(CYPREREQ)
ifeq ($(have_py3),yes)
	python3 python-inference/setup.py build_ext --inplace
endif

#MERC_OBJ = $(MERC:%.o=%.c)

libmerc_test: run_unit_test libmerc_test.c $(LIBMERC_SO) Makefile.in
	$(CC) -Wall -std=c11 libmerc_test.c -pthread $(LDFLAGS) -L./libmerc $(LIBMERC_SO) -lz -lcrypto -o libmerc_test
	@echo $(COLOR_GREEN) "To run before 'make install', export LD_LIBRARY_PATH=$(shell pwd)/libmerc" $(COLOR_OFF)

libmerc_driver:
	cd ../unit_tests/ && $(MAKE) all

# intercept.so
#

intercept.so: intercept.cc libmerc.a
	$(CXX) $(CFLAGS) -std=c++17 -Wall -Wno-narrowing intercept.cc libmerc/pkt_proc.cc -D_GNU_SOURCE -I/usr/include/nspr/ -fPIC -shared -lssl -lnspr4 -lgnutls libmerc/libmerc.a -o intercept.so

# special targets
#

.PHONY: clean
clean: libmerc-clean
	rm -rf mercury libmerc_test libmerc_util intercept_server tls_scanner cert_analyze os_identifier archive_reader batch_gcd string cbor unit_test decode pcap pcap_filter format intercept.so dns-trie gmon.out *.o *.json.gz
	for file in Makefile.in README.md configure.ac; do if [ -e "$$file~" ]; then rm -f "$$file~" ; fi; done
	for file in mercury.c libmerc_test.c tls_scanner.cc cert_analyze.cc $(MERC) $(MERC_H); do if [ -e "$$file~" ]; then rm -f "$$file~" ; fi; done

.PHONY: libmerc-clean
libmerc-clean:
	cd libmerc && $(MAKE) clean

.PHONY: distclean
distclean: clean
	rm -rf Makefile autom4te.cache config.log config.status
	cd libmerc && $(MAKE) distclean
	cd tables && $(MAKE) distclean

.PHONY: install
install: libmerc mercury
	mkdir -p $(bindir)
	$(INSTALL) mercury $(bindir)
#	$(INSTALL) $(LIBMERC) $(libdir)
	PATH=$(PATH):/sbin ldconfig
#	setcap cap_net_raw,cap_net_admin,cap_dac_override+eip $(bindir)/mercury
	-useradd --system --no-create-home --user-group mercury
	mkdir -p $(localstatedir)
	$(INSTALL) -d $(localstatedir) -o mercury -g mercury

.PHONY: install-nonroot
install-nonroot: mercury
	mkdir -p $(bindir)
	$(INSTALL) mercury $(bindir)
	mkdir -p $(localstatedir)
	$(INSTALL) -d $(localstatedir)

.PHONY: install-intercept.so
install-intercept.so: intercept.so
	mkdir -p $(interceptdir)
	chmod o+w $(interceptdir)
	$(INSTALL) intercept.so $(libdir)
	@echo "install complete; run 'export LD_PRELOAD=$(libdir)/intercept.so' to perform interception"

.PHONY: install-certtools
install-certtools: batch_gcd cert_analyze tls_scanner
	$(INSTALL) -d $(bindir)
	$(INSTALL) batch_gcd $(bindir)
	$(INSTALL) cert_analyze $(bindir)
	$(INSTALL) tls_scanner $(bindir)

.PHONY: uninstall
uninstall:
	rm -f $(bindir)/mercury
	rm -f $(libdir)/$(LIBMERC)
	PATH=$(PATH):/sbin ldconfig
	@echo "local captures not removed; to do that, run 'rm -rf $(localstatedir)'"

.PHONY: uninstall-certtools
uninstall-certtools:
	rm -f $(bindir)/batch_gcd
	rm -f $(bindir)/cert_analyze
	rm -f $(bindir)/tls_scanner

#  To build mercury for profiling using gprof, run
#
#     make clean
#     make OPTFLAGS="-pg"
#
#  ... to first remove all of the normally-built components, and then
#  build all of them with gprof instrumentation.  See 'man gprof' for
#  further informataion.

.PHONY: cppcheck
cppcheck: $(MERC)
	cppcheck --language=c++ --std=c++17 --force --enable=all -URAPIDJSON_DOXYGEN_RUNNING --template='{file}:{line}:{severity}:{message}' $^
	cd libmerc && $(MAKE) cppcheck

# the run_unit_test target builds and runs a simple application that
# invokes all of the unit_test functions available in the libmerc/
# subdirectory
#
# note: there are much more extensive unit tests in the ./unit_tests
# subdirectory
#
.PHONY: run_unit_test
run_unit_test: unit_test
	./unit_test

.PHONY: test
test: run_unit_test mercury libmerc_driver
	cd ../test && $(MAKE)

major=$(shell cat ../VERSION | grep -o "^[0-9]*")
minor=$(subst .,,$(shell cat ../VERSION | grep -o "\.[0-9]*\."))
patch=$(shell cat ../VERSION | grep -o "[0-9]*$$")
version=$(major).$(minor).$(patch)
MSV ="-DMERCURY_SEMANTIC_VERSION=$(major),$(minor),$(patch)"
.PHONY: increment-patchlevel increment-minor-version increment-major-version
increment-patchlevel:
	echo $(major).$(minor).$(shell expr $(patch) + 1) > ../VERSION
	git add ../VERSION ../doc/CHANGELOG.md
	git commit -m "incrementing patchlevel"
	git tag -a $(major).$(minor).$(shell expr $(patch) + 1) -m "\"patchlevel increment\""

increment-minor-version:
	echo $(major).$(shell expr $(minor) + 1).0 > ../VERSION
	git add ../VERSION ../doc/CHANGELOG.md
	git commit -m "incrementing minor version"
	git tag -a $(major).$(shell expr $(minor) + 1).0 -m "\"minor version increment\""

increment-major-version:
	echo $(shell expr $(major) + 1).0.0 > ../VERSION
	git add ../VERSION ../doc/CHANGELOG.md
	git commit -m "incrementing major version"
	git tag -a $(shell expr $(major) + 1).0.0 -m "\"major version increment\""

# EOF
